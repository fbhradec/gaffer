import Gaffer
import GafferAppleseed
import GafferImage
import GafferScene
import IECore
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 0, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 57, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 4, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

parent["variables"].addChild( Gaffer.NameValuePlug( "image:catalogue:port", Gaffer.IntPlug( "value", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "imageCataloguePort", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
parent["variables"].addChild( Gaffer.NameValuePlug( "project:name", Gaffer.StringPlug( "value", defaultValue = 'default', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "projectName", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
parent["variables"].addChild( Gaffer.NameValuePlug( "project:rootDirectory", Gaffer.StringPlug( "value", defaultValue = '$HOME/gaffer/projects/${project:name}', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "projectRootDirectory", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
parent["variables"].addChild( Gaffer.NameValuePlug( "", Gaffer.StringPlug( "value", defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), True, "member1", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["defaultFormat"] = GafferImage.FormatPlug( "defaultFormat", defaultValue = GafferImage.Format( 1920, 1080, 1.000 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["defaultFormat"] )
__children["AppleseedOptions"] = GafferAppleseed.AppleseedOptions( "AppleseedOptions" )
parent.addChild( __children["AppleseedOptions"] )
__children["AppleseedOptions"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Spreadsheet_RenderOptions"] = Gaffer.Spreadsheet( "Spreadsheet_RenderOptions" )
parent.addChild( __children["Spreadsheet_RenderOptions"] )
__children["Spreadsheet_RenderOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "as:cfg:adaptive_tile_renderer:max_samples", Gaffer.IntPlug( "value", defaultValue = 32, ), False, "maxAASamples", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["Spreadsheet_RenderOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "render:overscan", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "overscan", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["Spreadsheet_RenderOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "render:overscanTop", Gaffer.FloatPlug( "value", defaultValue = 0.10000000149011612, minValue = 0.0, maxValue = 1.0, ), False, "overscanTop", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["Spreadsheet_RenderOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "render:overscanBottom", Gaffer.FloatPlug( "value", defaultValue = 0.10000000149011612, minValue = 0.0, maxValue = 1.0, ), False, "overscanBottom", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["Spreadsheet_RenderOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "render:overscanLeft", Gaffer.FloatPlug( "value", defaultValue = 0.10000000149011612, minValue = 0.0, maxValue = 1.0, ), False, "overscanLeft", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["Spreadsheet_RenderOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "render:overscanRight", Gaffer.FloatPlug( "value", defaultValue = 0.10000000149011612, minValue = 0.0, maxValue = 1.0, ), False, "overscanRight", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["Spreadsheet_RenderOptions"]["rows"].addRows( 4 )
__children["Spreadsheet_RenderOptions"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["StandardOptions"] = GafferScene.StandardOptions( "StandardOptions" )
parent.addChild( __children["StandardOptions"] )
__children["StandardOptions"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop"] = Gaffer.Backdrop( "Backdrop" )
parent.addChild( __children["Backdrop"] )
__children["Backdrop"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop1"] = Gaffer.Backdrop( "Backdrop1" )
parent.addChild( __children["Backdrop1"] )
__children["Backdrop1"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop2"] = Gaffer.Backdrop( "Backdrop2" )
parent.addChild( __children["Backdrop2"] )
__children["Backdrop2"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop2"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
parent["variables"]["imageCataloguePort"]["value"].setValue( 58280 )
parent["variables"]["member1"]["name"].setValue( 'shot' )
parent["variables"]["member1"]["value"].setValue( '1' )
Gaffer.Metadata.registerValue( parent["variables"]["imageCataloguePort"], 'readOnly', True )
Gaffer.Metadata.registerValue( parent["variables"]["projectName"]["name"], 'readOnly', True )
Gaffer.Metadata.registerValue( parent["variables"]["projectRootDirectory"]["name"], 'readOnly', True )
__children["AppleseedOptions"]["in"].setInput( __children["StandardOptions"]["out"] )
__children["AppleseedOptions"]["options"]["maxAASamples"].setInput( __children["Spreadsheet_RenderOptions"]["out"]["maxAASamples"] )
__children["AppleseedOptions"]["__uiPosition"].setValue( imath.V2f( 13.1617184, -3.34758711 ) )
Gaffer.Metadata.registerValue( __children["Spreadsheet_RenderOptions"], 'nodeGadget:type', 'GafferUI::StandardNodeGadget' )
__children["Spreadsheet_RenderOptions"]["selector"].setValue( '${shot}' )
__children["Spreadsheet_RenderOptions"]["rows"][0]["cells"]["maxAASamples"]["value"]["enabled"].setValue( True )
__children["Spreadsheet_RenderOptions"]["rows"][0]["cells"]["overscan"]["value"]["value"].setValue( True )
__children["Spreadsheet_RenderOptions"]["rows"][0]["cells"]["overscan"]["value"]["enabled"].setValue( True )
__children["Spreadsheet_RenderOptions"]["rows"][0]["cells"]["overscanTop"]["value"]["enabled"].setValue( True )
__children["Spreadsheet_RenderOptions"]["rows"][0]["cells"]["overscanBottom"]["value"]["enabled"].setValue( True )
__children["Spreadsheet_RenderOptions"]["rows"][0]["cells"]["overscanLeft"]["value"]["enabled"].setValue( True )
__children["Spreadsheet_RenderOptions"]["rows"][0]["cells"]["overscanRight"]["value"]["enabled"].setValue( True )
__children["Spreadsheet_RenderOptions"]["rows"][1]["name"].setValue( '1' )
__children["Spreadsheet_RenderOptions"]["rows"][1]["cells"]["maxAASamples"]["value"]["value"].setValue( 42 )
__children["Spreadsheet_RenderOptions"]["rows"][1]["cells"]["maxAASamples"]["value"]["enabled"].setValue( True )
__children["Spreadsheet_RenderOptions"]["rows"][2]["name"].setValue( '2A' )
__children["Spreadsheet_RenderOptions"]["rows"][2]["cells"]["overscanTop"]["value"]["value"].setValue( 0.05000000074505806 )
__children["Spreadsheet_RenderOptions"]["rows"][2]["cells"]["overscanTop"]["value"]["enabled"].setValue( True )
__children["Spreadsheet_RenderOptions"]["rows"][2]["cells"]["overscanBottom"]["value"]["value"].setValue( 0.05000000074505806 )
__children["Spreadsheet_RenderOptions"]["rows"][2]["cells"]["overscanBottom"]["value"]["enabled"].setValue( True )
__children["Spreadsheet_RenderOptions"]["rows"][2]["cells"]["overscanLeft"]["value"]["value"].setValue( 0.05000000074505806 )
__children["Spreadsheet_RenderOptions"]["rows"][2]["cells"]["overscanLeft"]["value"]["enabled"].setValue( True )
__children["Spreadsheet_RenderOptions"]["rows"][2]["cells"]["overscanRight"]["value"]["value"].setValue( 0.05000000074505806 )
__children["Spreadsheet_RenderOptions"]["rows"][2]["cells"]["overscanRight"]["value"]["enabled"].setValue( True )
__children["Spreadsheet_RenderOptions"]["rows"][3]["name"].setValue( '2B' )
__children["Spreadsheet_RenderOptions"]["rows"][3]["cells"]["maxAASamples"]["value"]["value"].setValue( 36 )
__children["Spreadsheet_RenderOptions"]["rows"][3]["cells"]["maxAASamples"]["value"]["enabled"].setValue( True )
__children["Spreadsheet_RenderOptions"]["rows"][4]["name"].setValue( '2*' )
__children["Spreadsheet_RenderOptions"]["rows"][4]["cells"]["maxAASamples"]["value"]["value"].setValue( 34 )
__children["Spreadsheet_RenderOptions"]["rows"][4]["cells"]["maxAASamples"]["value"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["Spreadsheet_RenderOptions"]["rows"][0]["cells"]["maxAASamples"], 'spreadsheet:columnLabel', 'AA' )
Gaffer.Metadata.registerValue( __children["Spreadsheet_RenderOptions"]["rows"][0]["cells"]["maxAASamples"], 'spreadsheet:columnWidth', 23 )
Gaffer.Metadata.registerValue( __children["Spreadsheet_RenderOptions"]["rows"][0]["cells"]["maxAASamples"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["Spreadsheet_RenderOptions"]["rows"][0]["cells"]["maxAASamples"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["Spreadsheet_RenderOptions"]["rows"][0]["cells"]["maxAASamples"]["value"], 'description', 'Maximum number of anti-aliasing samples (0 for unlimited)' )
Gaffer.Metadata.registerValue( __children["Spreadsheet_RenderOptions"]["rows"][0]["cells"]["maxAASamples"]["value"], 'label', 'Max Samples' )
Gaffer.Metadata.registerValue( __children["Spreadsheet_RenderOptions"]["rows"][0]["cells"]["overscan"], 'spreadsheet:columnWidth', 57 )
Gaffer.Metadata.registerValue( __children["Spreadsheet_RenderOptions"]["rows"][0]["cells"]["overscan"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["Spreadsheet_RenderOptions"]["rows"][0]["cells"]["overscan"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["Spreadsheet_RenderOptions"]["rows"][0]["cells"]["overscan"]["value"], 'description', 'Whether to enable overscan, which adds extra pixels to the\nsides of the rendered image.\n\nOverscan can be useful when camera shake or blur will be added\nas a post-process. This plug just enables overscan as a whole \xe2\x80\x93\nuse the _Overscan Top_, _Overscan Bottom_, _Overscan Left_ and\n_Overscan Right_ plugs to specify the amount of overscan on\neach side of the image.' )
Gaffer.Metadata.registerValue( __children["Spreadsheet_RenderOptions"]["rows"][0]["cells"]["overscanTop"], 'spreadsheet:columnWidth', 79 )
Gaffer.Metadata.registerValue( __children["Spreadsheet_RenderOptions"]["rows"][0]["cells"]["overscanTop"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["Spreadsheet_RenderOptions"]["rows"][0]["cells"]["overscanTop"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["Spreadsheet_RenderOptions"]["rows"][0]["cells"]["overscanTop"]["value"], 'description', 'The amount of overscan at the top of the image. Specified as a\n0-1 proportion of the original image height.' )
Gaffer.Metadata.registerValue( __children["Spreadsheet_RenderOptions"]["rows"][0]["cells"]["overscanTop"]["value"]["value"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["Spreadsheet_RenderOptions"]["rows"][0]["cells"]["overscanBottom"], 'spreadsheet:columnWidth', 97 )
Gaffer.Metadata.registerValue( __children["Spreadsheet_RenderOptions"]["rows"][0]["cells"]["overscanBottom"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["Spreadsheet_RenderOptions"]["rows"][0]["cells"]["overscanBottom"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["Spreadsheet_RenderOptions"]["rows"][0]["cells"]["overscanBottom"]["value"], 'description', 'The amount of overscan at the bottom of the image. Specified as\na 0-1 proportion of the original image height.' )
Gaffer.Metadata.registerValue( __children["Spreadsheet_RenderOptions"]["rows"][0]["cells"]["overscanBottom"]["value"]["value"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["Spreadsheet_RenderOptions"]["rows"][0]["cells"]["overscanLeft"], 'spreadsheet:columnWidth', 80 )
Gaffer.Metadata.registerValue( __children["Spreadsheet_RenderOptions"]["rows"][0]["cells"]["overscanLeft"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["Spreadsheet_RenderOptions"]["rows"][0]["cells"]["overscanLeft"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["Spreadsheet_RenderOptions"]["rows"][0]["cells"]["overscanLeft"]["value"], 'description', 'The amount of overscan at the left of the image. Specified as a\n0-1 proportion of the original image width.' )
Gaffer.Metadata.registerValue( __children["Spreadsheet_RenderOptions"]["rows"][0]["cells"]["overscanLeft"]["value"]["value"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["Spreadsheet_RenderOptions"]["rows"][0]["cells"]["overscanRight"], 'spreadsheet:columnWidth', 87 )
Gaffer.Metadata.registerValue( __children["Spreadsheet_RenderOptions"]["rows"][0]["cells"]["overscanRight"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["Spreadsheet_RenderOptions"]["rows"][0]["cells"]["overscanRight"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["Spreadsheet_RenderOptions"]["rows"][0]["cells"]["overscanRight"]["value"], 'description', 'The amount of overscan at the right of the image. Specified as\na 0-1 proportion of the original image width.' )
Gaffer.Metadata.registerValue( __children["Spreadsheet_RenderOptions"]["rows"][0]["cells"]["overscanRight"]["value"]["value"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
__children["Spreadsheet_RenderOptions"]["__uiPosition"].setValue( imath.V2f( -5.58727455, -3.34842491 ) )
__children["StandardOptions"]["options"]["overscan"].setInput( __children["Spreadsheet_RenderOptions"]["out"]["overscan"] )
__children["StandardOptions"]["options"]["overscanTop"].setInput( __children["Spreadsheet_RenderOptions"]["out"]["overscanTop"] )
__children["StandardOptions"]["options"]["overscanBottom"].setInput( __children["Spreadsheet_RenderOptions"]["out"]["overscanBottom"] )
__children["StandardOptions"]["options"]["overscanLeft"].setInput( __children["Spreadsheet_RenderOptions"]["out"]["overscanLeft"] )
__children["StandardOptions"]["options"]["overscanRight"].setInput( __children["Spreadsheet_RenderOptions"]["out"]["overscanRight"] )
__children["StandardOptions"]["__uiPosition"].setValue( imath.V2f( 13.1617184, 4.81647587 ) )
__children["Backdrop"]["title"].setValue( '' )
__children["Backdrop"]["__uiBound"].setValue( imath.Box2f( imath.V2f( -9.84218407, -40.1002464 ), imath.V2f( 39.9908371, 10 ) ) )
__children["Backdrop"]["__uiPosition"].setValue( imath.V2f( -11.0611553, 25.5103664 ) )
__children["Backdrop1"]["title"].setValue( 'Example: Multi-shot Render Spreadsheet' )
__children["Backdrop1"]["description"].setValue( "In this example, the graph is structured to handle the beauty render of multiple shots, each with slight differences in render settings. A Spreadsheet node drives the per-shot variations by modifying the renderer's Options nodes in response to different values of a `\\${shot}` Context Variable.\n\nSince this is a render graph, it's responsible for all render options, and should account for any default options should `\\${shot}` be undefined or have an unanticipated value. The spreadsheet's Default row defines the fallback, or default values of the globals." )
__children["Backdrop1"]["__uiBound"].setValue( imath.Box2f( imath.V2f( -10, -18.1947308 ), imath.V2f( 30, 10 ) ) )
__children["Backdrop1"]["__uiPosition"].setValue( imath.V2f( -6.47388268, 25.3601151 ) )
__children["Backdrop2"]["title"].setValue( 'Global Context Variables' )
__children["Backdrop2"]["description"].setValue( 'Since the custom `\\${shot}` Context Variable needs to be available at every node in the graph, it must be added as a global Context Variable. These can be declared and assigned from the Settings window: File > Settings. In it, under the Variables tab, you will find some default global variables, but you can add new ones by clicking the plus button and giving them names and values. All of the standard plug types are supported: string, int, float, vector, etc.\n\nFor the purposes of this example, the value of `\\${shot}` is `1`. When this graph is executed, the dispatcher would override this value to the actual name of the shot being rendered.' )
__children["Backdrop2"]["__uiBound"].setValue( imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 30, 17.6528759 ) ) )
__children["Backdrop2"]["__uiPosition"].setValue( imath.V2f( 40.6892357, -4.37028837 ) )


del __children

