# 0.92.0

#### Core

- Made Plug flags serialisation more future proof (#684).
- Removed redundant serialisation of default values. This reduced file sizes by 25% and load times by nearly 20% for a large production script. Note that changing the default value for a plug or shader parameter now represents a backwards compatibility break with old scripts.
- Optimised python bindings, giving speedups in many areas, including file loading and shader generation.
- Removed parameter mapping from ObjectReader
- Fixed threading bugs in ObjectReader.
- Fixed bugs preventing expressions being used with filenames in ObjectReader.

#### UI

- Improved plug "Edit Input..." menu item. It now ensures that the input plug widget is directly visible on screen, whereas before it could only show the node editor for the input node.
- Prevented nodes from being created offscreen (#640).
- Exposed "enabled" plugs in a new Node Editor "Node" tab (#759).
- Fixed MessageWidget crashes encountered in Maya.
- Fixed bug preventing positioning of new nodes within backdrops (#769).
- Added workaround for PyQt/uuid crashes (#775).
- Added filtering so that DirNameParameter file browsers will only show directories and not files (#774).
- Fixes image viewer colour swatches when the image doesn't contain an alpha channel.
- Improved scene preview support to include .abc, .cob, and .pdc files (any files for which Cortex has a Reader implementation).

#### Scene

- Options and Attributes nodes now have sensible default values for their plugs.

#### Image

- Fixed bugs associated with negative display window origins.
- Fixed crash when creating ImageWriters with another image node selected (#681 #255).

#### Arnold

- Arnold shader names are now prefixed with "ai" within the node search menu, to aid finding them amongst the other nodes.

#### API

- Added Widget.reveal() method (#503).
- Added extend argument to NodeGraph.frame(). The default value of false behaves exactly as before - the specified set of nodes are framed in the viewport. A value of true still causes the nodes to be included in the framing, but in addition to the original contents of the frame.
- Properly implemented CompoundNumericPlugValueWidget.childPlugValueWidget().
- Removed MessageWidget.textWidget() method. The internal text widget should now be considered private. The currently displayed messages may be cleared using the new MessageWidget.clear() method.
- Removed deprecated MessageWidget.appendException() method.
- Added control over the default button to the OpDialogue. This controls whether the OK or Cancel button is focussed by default when displaying the Op. The default value is as before, focussing the OK button, but the value can be controlled either by user data in the Op or by passing an alternative argument to the OpDialogue constructor.
- Adopted new Python wrapping mechanism from Cortex.
- Fixed pollution of GafferUI namespace with IECore module.
- Added DirNameParameterValueWidget.
- PathPreviewWidget now respects registration order.

#### Build

- Requires Cortex 8.2.0.

# 0.91.0

#### Apps

- Fixed gui startup error in ocio.py.

#### Core

- Fixed copy/paste problems where inappropriate values would be copied for plugs with inputs, where the input was not in the selection being copied (#740).

#### UI

- Added a first implementation of an automatic node layout algorithm. This is available via the Edit/Arrange menu item (#638).
- Fixed image viewer data window display in the presence of an offset display window.
- Fixed TextGadget vertical bound. It was slightly different depending on the text contents, causing different nodes to appear with slightly different heights.
- Moved OSLObject and OSLImage shader inputs to the left of the node.
- Added message filtering to MessageWidget.

#### Scene

- Fixed AlembicSource refresh failure (#737).
- Fixed errors when AlembicSource filename is "".

#### RenderMan

- Added support for multiple types in RSL "coshaderType" annotation (#621).

#### OSL

- Added support for arbitrary image channels to the OSLImage node. The InChannel and InLayer shaders should be used to fetch channels and layers from the input image, and the OutChannel and OutLayer shaders may be used to write values to the output channels and layers. The Out* shaders should be plugged into an OutImage shader which is then plugged into the OSLImage node.
- Added support for arbitrary primitive variables to the OSLObject node. The InFloat, InColor, InNormal, InPoint and InVector shaders provide access to vertex primitive variables on the input primitive, and the corresponding Out* shaders
can be used to write values to the output primitive variables. The Out* shaders should be pluggined into an OutObject shader which is then plugged in to the OSLObject node.
- Added V3fVectorData support to OSLRenderer user data queries.
- Fixed dirty propagation through OSLShader closure outputs.
- Improved OSL processor shader input acceptance.
	- Only accepts OSLShader nodes if they hold a surface shader, as other shader types can't be used directly.
	- Also accepts Box and ShaderSwitch connections so that shaders can be connected indirectly.
- Revised shader naming convention to UpperCamelCase. The names of existing shaders have therefore changed.

#### API

- Moved OSLImage::shadingEngine() method to OSLShader::shadingEngine().
- Removed FormatPlugSerialiser from the public interface - it was not intended to be subclassed.
- Removed FormatBindings namespace and moved formatRepr() into the GafferImageBindings namespace.
- Switched formatRepr() signature to take a reference rather than a pointer.
- Added MessageWidget setMessageLevel() and getMessageLevel() methods.

# 0.90.0

#### Scene

- Fixed off-by-one error in scene cache preview frame ranges.

#### UI

- Fixed slight jump when connections are first drawn.
- Removed PathFilter paths plug representation in the NodeGraph. There aren't really any nodes we would connect to it.
- Improved OpDialogue warning display. If an Op completes successfully, but emits error or warning messages in the process, these will now always be flagged before the user can continue.

#### API

- Refactored ConnectionGadget into an abstract base class with a factory, to allow for the creation of custom subclasses. A new StandardConnectionGadget class contains the functionality of the old ConnectionGadget. Config files may register creation function for connections to control the type of gadget created, and its style etc.
- Added MessageWidget.messageCount() method. This returns the number of messages currently being displayed.
- Added OpDialogue.messageWidget() method. This provides access to the message display for the Op being executed.
- Added MessageWidget.forwardingMessageHandler(), to allow messages received by the widget to be propagated on to other handlers. This can be useful for connecting the OpDialogue to a centralised logging system.
- Deprecated MessageWidget appendMessage() and appendException() methods. The same result can be achieved by passing messages via the message handler instead.

# 0.89.0

#### Core

- Added Support for NumericPlug->BoolPlug and BoolPlug->NumericPlug connections.

#### UI

- Added additional types to the user plug creation menu.
- Added pre-selection highlighting in the NodeGraph (#94).
- Added "Create Expression..." menu option for bool plugs.
- Fixed NodeGraph resizing to crop rather than scale (#10).
- Fixed read only CompoundPlug labels.
- Added workarounds for Qt OpenGL problem on OS X (#404 and #396).

#### Scene

- Added Parent node. This allows one hierarchy to be parented into another (#91).
- Fixed bug which could cause incorrect bound computation at the parent node in the Instancer.
- Seeds and Instancer classes now preserve existing children of the parent location, renaming the new locations to avoid name clashes if necessary.
- Added tag filtering to the SceneReader node.
- Enabled input connections to PathFilter "paths" plug. This allows it to be promoted to box level and be driven by expressions etc (#704).

#### Apps

- Updated view app to contain tabs with different views (info, header, preview etc).
- Added scene cache previews to the browser and view apps (#416).

#### API

- Removed BranchCreator name plug - derived classes are now responsible for generating the entirety of their branch.
- Modified BranchCreator hashing slightly to improve performance - derived classes hashBranch*() methods are now responsible for calling the base class implementation.
- Fixed Box::canPromotePlug( readOnlyPlug ) to return false.
- Fixed Box::canPromotePlug() to check child plugs too.
- Fixed bug in read only Plugs with input connections.
- Added Gadget setHighlighted() and getHighlighted() methods.
- Added supportedExtensions() methods to ImageReader and SceneReader.
- Added Viewer.view() and Viewer.viewGadgetWidget() methods.
- Added NodeToolbar and StandardNodeToolbar classes.

#### Build

- Updated public build to use OpenEXR 2.1.
- Updated public build to use OpenImageIO 1.3.12.
- Updated public build to use OpenShadingLanguage 1.4.1.
- Removed pkg-config from the dependency requirements.

# 0.88.1

#### Core

- Added env app which mimics /usr/bin/env
- Enabled Python threading by default in Gaffer python module

#### UI

- Renaming is available for promoted children of CompoundDataPlugs
- Moved scene node filter plugs to the right hand side of the node

#### Image

- Fixed threading issue in Display node

# 0.88.0

#### Core

- Fixed threading issue in caching code.
- Implemented per-instance metadata for Box nodes. This will provide the basis for the user to make further customisations to Boxes, like setting descriptions for plugs and so on.
- Fixed bug in Switch node which could cause crashes when promoting the index plug.
- Added pivot to TransformPlug.

#### UI

- NodeGraph node tooltips now display a helpful description for the node. Node authors can define this text using the "description" Metadata entry (which is intended to provide a static description of the node's purpose) and the "summary" Metadata which may optionally be computed dynamically to describe the current state of the node (#157).
- Fixed initial value jump in viewer gamma/exposure virtual sliders.
- NodeGraph nodes may now display plugs on all sides, rather than just top/bottom or left/right as before. Node authors may control plug placement by defining a "nodeGadget:nodulePosition" Metadata entry.
- ShaderAssignment nodes now receive their shader input from the left (#82).
- Fixed OpDialogue hangs caused by the rapid output of many messages from an Op.
- Fixed strange browser behaviour when editing a path which is no longer valid (#64).
- Improved image viewer responsiveness, especially when used as a render viewer.
- Fixed position of plugs in the NodeGraph when the node gadget was very narrow.
- Made Box nodule positions match internal nodule positions (#608).
- Simplified OpDialogue error display - long error messages are now only visible in the Details view, rather than cluttering up the main window, and potentially making it very large on screen.

#### Scene

- Added a ParentConstraint node (#26).
- Added "includeRoot" plug to GafferScene::SubTree. This means that when choosing /path/to/theNewRoot as the root, the subtree will be output under /theNewRoot rather than /. Previously this was only possible by using an Isolate node followed by a Subtree (#565).
- Added "targetOffset" plug to the Constraint node. This is of most use for offsetting the aim point in the AimConstraint node (#278).
- Fixed bug in copying a node which has an input from an unselected PathFilter.
- Fixed bug in ShaderAssignment node which could cause crashes when querying for acceptable inputs.
- Improved the transform node
	- Added a pivot plug (#156)
	- Added a space plug to specify whether the transform is applied in World or Object space.

#### Image

- Fixed ImageReader problem which caused the green and blue channels of non-float images to be offset horizontally.
- Fixed bug which could cause the OpenColorIO node to output greyscale images.
- Optimised Display node.
- Optimised ChannelDataProcessor::channelEnabled().

#### OSL

- Updated for compatibility with OSL 1.3, 1.4 and 1.5 (master branch).
- Removed unsupported closures from OSLRenderer.
- Added debug() closure support to OSLRenderer to allow the output of multiple values via ShadingEngine::shade(). The closure takes an optional "type" keyword argument to define the type of the resulting output.

#### API

- Added GafferUI.SpacerGadget class.
- Reimplemented GafferUI.Metadata in C++, so it can be used from C++ code as well as from Python.
- Fixed bug in Widget.mousePosition() with GLWidget overlays.
- Fixed GafferScene.ScenePath.isValid() to only consider a path as valid if all parents up to the root exist according to ScenePlug.childNames().
- Added space conversion methods to GafferImage::Format. These are useful for converting between the Cortex and OpenEXR Y-down space to the Gaffer y-up space.
- Fixed GafferImage::FormatData serialisation.
- Removed deprecated ImageView( name, inputPlug ) constructor.  This was being used by old View subclasses which would pass their own input plug and then use setPreprocessor() to insert some conversion network. Subclasses should now use insertConverter(), following the example in GafferImageUITest.ImageViewTest.testDeriving.
- Moved Metadata class from libGafferUI module to libGaffer.

#### Build

- Fixed compilation with GCC 4.4.

# 0.87.1

#### UI

- Constrained slider positions inside range by default (#99). Shift modifier allows slides to exceed range.
- Key modifiers are now correctly updated during drags.
- Fixed PySide incompatibility in Slider.

#### Image

- Added ImageSampler node to GafferImage
- Fixed colour space used for ImageView colour sampling (now in linear space).

# 0.87.0

#### UI

- Added visualisation of clipping colours in the image viewer (#572).

#### Core

- Boxes now export all non-hidden plugs for referencing. Prior to this they only exported "in", "out" and user plugs.
- Fixed unwanted plug promotion when nesting Boxes inside Boxes.

#### Scene

- Fixed Subtree update problem.
- Added enabling/disabling support to SceneTimeWarp and SceneContextVariables.
- Added a SceneSwitch node. This can be used to choose between different scene hierarchies.
- Added a ShaderSwitch node. This can be used to switch between different shaders being fed into a ShaderAssignment. It is also compatible with RenderMan coshaders, so can be used to switch between different coshaders in a network.

#### Image

- Added a Clamp node
- Fixed bug in Display node which caused problems when using multiple Displays at once.
- Added ImageTimeWarp, ImageContextVariables and ImageSwitch nodes - these are equivalent to their Scene module counterparts.

#### API

- Added missing IntrusivePtr typedefs to GafferImage
- Added RecursionPredicate to FilteredRecursiveChildIterator. This allows the definition of iterators which automatically prune the recursion based on some condition.
- Redefined RecursivePlugIterators so that they do not recurse into nested nodes - instead they just visit all the plugs of the parent node.
- Improved Node::plugSetSignal() behaviour. The signal is now emitted for all the outputs of the plug being set in addition to the source plug - otherwise plugSetSignal() could not be used effectively for plugs which had been promoted to Box level.
- Renamed SceneContextProcessorBase to SceneMixinBase.

#### Build

- Fixed build for Ubuntu 12.04.
- Updated public build to use Arnold 4.1.
- Removed OIIO versioning workaround - previously we had to rename the OIIO library to avoid conflicts with Arnold, but since Arnold 4.1 such conflicts no longer exist.
- Updated default boost version to 1.51.0.
- Added dependenciesPackage build target. This can be used to make a package of prebuilt dependencies to seed a build. from.
- Updated default Cortex version to 8.0.0b5.

# 0.86.0

#### UI

- Added exposure and gamma controls to the image viewer (#571).
- Added colourspace management to the image viewer (#573). By default display colourspaces are taken from the OCIO config, but any image processing node (or Box containing them) can be registered via config files to provide alternative methods of colour management.
- Added auto expand option to the scene viewer (#163).
- Added Shift+Down shortcut for full expansion in the scene viewer (#556).
- Added "look through camera" in the scene viewer (#49).
- Added global Left/Right keyboard shortcuts for frame increment/decrement (#52).
- Added background operation to op dialogues in the op and browser apps. The UI now remains responsive during execution and displays IECore messages and results (#591).
- Objects can now be dragged from the Viewer and SceneHierarchy into path fields such as the AimConstraint target or the StandardOptions camera.
- Buttons now accept Return and Enter keypresses in addition to the space bar and clicking.
- Confirmation dialogues now focus the default button so they can be dismissed using the keyboard.
- Tarted up the About dialogue with a nice new logo courtesy of Tiziana Beretta.
- Fixed MenuButton bug whereby menus could be shown partially offscreen.
- Fixed Timeline bugs
	- Wraparound during playback would remove the fractional part of the frame number
	- Entering a value in the frame field which was outside the frame range would make it impossible to subsequently enter a fractional frame number.
    - Changing the frame number via the numeric field didn't update until focus left the field.
- Fixed clipping problem in BusyWidget drawing, and removed overhead of invisible BusyWidgets.
- Fixed GadgetWidget overlay event handling problems.
- Fixed crashes when MultiSelectionMenu was used in GLWidget overlay.
- Viewer toolbar now omits labels when Metadata value is "".
- Made the NodeGraph save and restore its framing when entering and leaving Boxes (#626).
- Fixed PathWidget menu positioning when used as a GLWidget overlay.

#### Scene

- Added a UnionFilter node (#594).
- Optimised SceneReader. It now computes constant hashes where data is not animated, resulting in significant speedups and reduced memory consumption. Approximately 2x speedup and 50% memory usage reduction has been seen in animated production assets (#545).
- Optimised SceneHierarchy update for improved playback performance (#545). 4x speedups have been seen with animated production assets.
- Fixed the laggy node dragging seen after expanding the SceneHierarchy contents and moving the current frame a few times (#209).
- Disabled StandardOptions camera and resolution by default.

#### Image

- Optimised OpenColorIO node performance.
- Optimised grade node performance and memory usage (through improved hash implementation).
- Set Grade node's gamma plug minimum value to 0.
- Fixed threading related OpenColorIO crashes on OS X.
- Fixed ImagePrimitiveSource hashing bug. This would manifest itself as a corrupted image when connecting a disabled node downstream from a Display node (#420).
- Fixed miscellaneous hashing bugs.

#### Core

- Optimised StringPlug::getValue() and StringPlug::hash() for cases where the string doesn't contain substitutions.
- Fixed bug in Path inequality operator.
- Renamed python deprecation warning output - Python2.7 disabled this by default.

#### API

- Added a new Playback class. This provides a central controller for all clients who wish to initiate playback or react when playback occurs.
- Added ColorProcessor base class. This makes it easier to implement image processing nodes which mix across channels.
- DependencyNode::affects() is now called for output plugs too. This can trip up poorly implemented DependencyNode::affects() overrides - see f1e9cb3bf20430b7889795dcb5eccec863f1e2e7 for details.
- Resolved ambiguities in Widget auto-parenting keyword arguments. Parenting arguments should now be passed as "parenting = { ... }" rather than just "...".  The old style of argument passing will be deprecated (#655).
- Added ViewportGadget::set/getCameraEditable() methods.
- Added previous root node to GraphGadget::rootChangedSignal().
- Added set/getTextSelectable() method to GafferUI.Label.
- Added Dialogue set/getModal() methods.
- Added Path._emitPathChanged() protected method.  This can be used by derived classes to emit the pathChangedSignal(), avoiding emitting it if nothing is listening. All subclasses should use this in preference to self.pathChangedSignal()( self ).
- Added Context::hasSubstitutions() method. This can be used to query if a string contains any substitutions supported by Context::substitute().
- Added Slider set/getPositionIncrement() methods. These allows the cursor key position nudging behaviour to be controlled.
- Added const version of GafferUI::View::getPreprocessor.
- Added EnumPlugValueWidget.selectionMenu() method.
- Renamed ImageNode::hash*Plug() methods to hash*(), for consistency with the rest of the framework.
- Refactored ImageNode hashing for improved performance and clarity - see 78b8739f1867ecd3b660838d384cdd6083734d92 for details.
- Added many missing IntrusivePtr typedefs.
- Added support for "divider" Metadata in viewer toolbars.

# 0.85.1

#### Scene

- Compatibility with Cortex 8.0.0b1

# 0.85.0

#### API

- Added Bookmarks API for storing Path bookmarks by application, path type, and category (#55)
 - Configs can define custom bookmarks on startup (https://github.com/ImageEngine/gaffer/wiki/Custom-Bookmarks)
 - Parameters can specify the bookmarks category with a ["UI"]["bookmarksCategory"] user data entry
 - Support in the gui, browser, and op apps
 - Support in File menu, PathChooserDialogue, PathChooserWidget, PathParameter, PathVectorParameter, RenderMan shader parameter, Box, and Reference node UIs
- Added Style::changedSignal()
- Added Window set/getIcon and setting GafferLogoMini as the default window icon
- Added TextWidget set/getPreferredCharacterWidth methods
- Fixed ParameterisedHolder parameterChanged() crashes
- Fixed Widget.bound() on OS X
- Fixed some bugs with null plugs in Box's plug promotion methods

#### GL

- Fixed GLSL shaders used by the UI for OpenGL 2.1 (requires Cortex 8.0.0-a23)
- Fixed OpenGL drawing when embedded in Houdini (requires Cortex 8.0.0-a22)

#### UI

- Added ColorSwatchPlugValueWidget (#625)
- Added new Gaffer logos (though only using them for window icons currently)
- Increased preferred width of PathWidgets (#515)
- Improved PathChooserDialogue handling of invalid selections (#628)
- Fixed Dialogue positioning and focussing on Linux (#220, #642, #62)
- Fixed SectionedCompoundDataPlugValueWidget child widget bugs (#588)
- Fixed Timeline start/end field sizing bug (#111)

#### Scene

- Added DeleteAttributes node and AttributeProcessor base class (#587)
- Fixed PrimitiveVariableProcessor::affects()

#### RenderMan

- Fixed RenderManShader.acceptsInput() crash

#### OSL

- Added closure parameter support to OSLShader

# 0.84.0

#### UI

- Added shift+drag of node to panel to create duplicate editor (#575).
- Added HSV readout for pixel below mouse in image viewer (#576).
- Improved the UI for Attributes and Options, to distinguish between the boolean used to enable a setting and the boolean used to define the value (#65).
- Fixed unwanted scaling of Button images.
- Added a toolbar to the viewer, initially with only a single button for specifying the 3D display style (#114).
- Improved MenuButton menu positioning.
- Fixed bug where searchable menus kept keyboard focus after closing.
- Fixed focus stealing problems apparent in Viewer and NodeGraph. They still take focus on mouse enter, but will not steal focus from text entry widgets (#555, #439).
- Added per-column visibility for CompoundVectorParameterValueWidget. Visibility is specified using the standard ["UI"]["visible"] userData entries on the child parameters which provide the columns (#526).
- Stopped plug controls accepting drags from themselves. This was causing trouble for users who were accidentally dragging and dropping a single line from a PathVectorDataPlugValueWidget onto itself, thus removing all the other lines.
- Added drag start threshold, to make it harder to accidentally start a drag (#593).
- Disabled "Remove input" menu item for read only plugs and uis.
- Disabled Box promotion menus on read only UIs (#604).
- Disabled ganging menu items for read only UIs.
- Stopped standard graph layout reconnecting invisible nodes.

#### Scene

- Prevented rogue connections being made to Shader "parameters" Plug.
- Fixed bugs in computing hashes for transform, object and attributes at the scene root.

#### OSL

- Added support for struct parameters.
- Added shaders for doing basic vector arithmetic.
- Added support for N global variable in OSLRenderer.
- Fixed OSLShader hash bug. Because OSL shaders are the first shader type we've supported where a single shader can have multiple outputs, we weren't taking into account _which_ particular output was connected when computing the hash.
- Prevented vector->color connections for OSLShader nodes. OSL itself doesn't allow such connections so we mustn't either. Also added a vectorToColor shader to help work around the restriction.

#### Documentation

- Started versioning documentation releases - they follow the app release version.
- Changed modifier key styling in documentation content to match that used in interface.
- NodeEditor content expanded.
- NodeGraph content expanded.
- New images.
- New screen grab setups.
- Simplified example light shader.

#### API

- Renamed CheckBox to BoolWidget and added different display modes. CheckBox remains as an alias to BoolWidget for backwards compatibility.
- Added stream insertion operator for GafferScene::ScenePlug::ScenePath.
- Fixed RunTimeTyped declaration for SceneView. It was declared as deriving from View rather than View3D.
- Fixed bug in Widget.widgetAt().
- Added widget overlays to GLWidget. This allows any Widget subclass to be displayed as an overlay on top of the OpenGL contents.
- Added setColumnVisible/getColumnVisible methods to VectorDataWidget.
- Implemented VectorDataPlugValueWidget.setHighlighted().
- Fixed StandardNodeUI.setReadOnly() to properly affect plug labels.
- Implemented setPlug on a SectionedCompoundDataPlugValueWidget.
- Fixed DependencyNode::enabledPlug() python bindings.
- Added python binding for ValuePlug::setFrom().

# 0.83.0

#### UI

- Added support for framing nodes and plugs dragged to the NodeGraph.
- Fixed overzealous pinning of nodes dragged to editors. Specifically, a node dragged from within an editor would be accepted as a pinning-drag into that very same editor. Now a drag must originate from outside the editor to be considered for pinning.
- Stopped GafferUI.Frame from expanding beyond the min/max of its contents. It now behaves like the other containers in this respect. Frames can still expand, but now only when their contents want to. Updated ErrorDialogue for this fix by adding some appropriate Spacers, and updated it to use the newer "with" syntax for building UIs at the same time.
- Added highlighted rendering for frames.
- Added ConnectionPlugValueWidget. This is a fallback widget for plugs that otherwise have no value to display. It shows the input connection to the plug, and provides means of navigation to that input (#130).
- Added post-execution behaviours to OpDialogue. These allow the UI writer, the Op writer or the user to choose whether or not the dialogue should be closed after the Op has executed (#560).
- Fixed PathListingWidget errors when "/" path is invalid.  Invalid root paths occur quite frequently in the SceneHierarchy editor when an invalid filename has been entered in a SceneReader or AlembicReader. Those nodes will still display an error, but the SceneHierarchy now won't output a confusing stacktrace which distracts people from the root cause (#528).
- Added Alt click modifier for selecting upstream nodes in GraphGadget. Alt+Shift click adds all upstream nodes to the selection. Alt+Ctrl click removes all upstream nodes from the selection (#437).
- Fixed launching of external URLs on OS X.

#### Scene

-  Fixed Prune node's forward declarations of lights and cameras. Previously it would not correctly remove the forward declaration for an object whose ancestor had been pruned.
- Added Isolate node type.  This removes all paths which are not directly above or below the chosen location - particularly useful for singling out certain assets from a large scene (#564).
- Improved default values for Seeds and Instancer nodes. The new defaults mean there are less steps to perform to get something happening.
- Stopped annoying startup errors when 3delight or arnold are missing (#486).

#### OSL

- Introduced a new gaffer module which integrates Open Shading Language.
	- OSLShader node represents OSL shaders and allows them to be connected into shading networks.
	- OSLImage node executes OSL shaders in the context of an input image to perform arbitrary image processing.
	- OSLObject node executes OSL shaders in the context of an object's primitive variables to perform geometry deformation.
	
#### API

- Added custom formatters and name depth control to NameLabel.
- Added Widget.isAncestorOf() method.
- Added ButtonEvent.button field.
- Improved path matching to provide more complete information.
- Added GraphGadget::upstreamNodeGadgets() method. 

#### Support apps

- Added ability to specify Widget to be grabbed in the screenGrab app.

####################################################################################################

# 0.82.0

#### Core

- Made Plug::acceptsInput() consider current output connections (#532).

#### UI

- Added even-more-simplified mode to StandardNodeUI (#549).
- Fixed GraphGadget for NULL return from NodeGadget::create(). This allows NodeGadget::registerNodeGadget() to be used with functions that will return NULL to signify that the node should be hidden.

#### Scene

- Fixed errors reading polygon normals from Alembic files (courtesy of Cortex 8.0.0-a18).
- Added MapOffset node for offsetting texture coordinates.

#### RenderMan

- Fixed output of multiple displays (courtesy of Cortex 8.0.0-a18) (#357).
- Added automatic instancing capabilities (courtesy of Cortex 8.0.0-a18).

0.81.0
======

Core
----

- Improved dirtiness propagation mechanism to remove duplicate signal emission.

UI
--

- Backdrop improvements
	- Backdrop contents can now be scaled, so large backdrops can still have readable text when zoomed out.
	- Fixed bug which meant that empty backdrops didn't immediately redraw as highlighted when selected.
	- Improved resizing behaviour.
	- Fixed cut and paste bug.

Scene
-----

- Added doublesided attribute to StandardAttributes node (#275).

Arnold
------

- Fixed packaging of Arnold plugins.
- Fixed problem where light shaders weren't being created as lights.

RenderMan
---------

- Fixed public build to work with older 3delight versions where RiProceduralV isn't available.
- Added support for several new attributes in RenderManAttributes node (#275).

API
---

- The plugDirtiedSignal() is now emitted when a value has been edited with ValuePlug::setValue() - this means that observers need only ever use plugDirtiedSignal() instead of also having to use plugSetSignal() as well.
- Added Style::characterBound(). This returns a bounding box guaranteed to cover the largest character in the font. It is useful for correctly positioning the text baseline among other things.


0.80.0
======

UI
--

- NodeGraph now only drag-selects nodes that are wholly contained in the drag area, not merely intersecting it.
- Added a Backdrop node (#153). 

RenderMan
---------

- Added support for "help" shader annotation in RenderManShaderUI (#536). This provides help for the shader as a whole and is mapped into the MetaData as the node description, appearing in the NodeEditor as a tooltip.

API
---

- Added optional continuous update to string PlugValueWidgets, controlled by the continuousUpdate parameters to the constructor. This transfers the text from the ui to the plug on every keypress.

Core
----

- Fixed serialisation of dynamic BoxPlugs.

Documentation
-------------

- Improvements too numerous to mention.

0.79.0
======

UI
--

- Added additional plug types to the CompoundDataPlug new plug menu (#522).
- Fixed bug in searchable Menus with no entries (#527).

Scene
-----

- Added CustomAttributes and CustomOptions nodes. These will be used instead of the old Attributes and Options nodes, and exist to better distinguish their use from the Standard, RenderMan and Arnold options and attributes nodes.

RenderMan
---------

-  Enabled hosting of RenderManShaders inside custom Box classes. Previously it only worked inside Boxes and not classes derived from Box.

API
---

- Added python subclassing ability to Serialisation::Serialiser (#520).


0.78.0
======

API
---

- Added python bindings for signal::num_slots and signal::empty().
- Added Gadget::idleSignal(). This allows Gadgets to do things during the idle times of the host event loop.
- Added NodeEditor.nodeUI() method.
- Added CompoundEditor.editorAddedSignal().
- Enabled subclassing of Box from Python.
- Made RenderManShaderUI public.

Core
---

- Fixed serialisation of ExecutableOpHolder.
- Added dynamic requirement plugs to Executable.
- 

UI
--

- Added middle mouse drag for dragging nodules to the script editor without dragging a connection.
- Further increased width of plug labels in NodeEditor (#98).
- Fixed read-only RenderManShader UIs.
- Fixed bug whereby read-only PlugValueWidgets were accepting drags.
- Added Help menu.
- Added NodeGraph auto-scrolling.
- Added support for "presets" parameter type hint.

OS X
----

- Fixed GafferImageUI linking.

0.77.0
======

- Added alignment support and addSpacer method to ListContainer.
- Fixed an update bug in the pixel value inspector (#401).
- Added the pinned status to saved layouts (#444).
- Added read-only mode to NodeUIs and NodeEditor (#414). Note that this currently interacts poorly with activators on RenderManShader node, and will be fixed in a future release.
- Fixed read-only MultiLineTextWidget bugs.
- Implemented tag reading in SceneReader node. Tags are represented as BoolData attributes called "user:tag:tagName" (#494).
- Increased width of plug labels in NodeEditor (#98).
- Improved the default layout to include SceneHierarchy and SceneInspector and Timeline editors.
- Fixed TabbedContainer sizing when tabs not visible.
- Fixed crashes when loading old scripts where coshader array parameters were stored as Compound plugs.
- Fixed propagation of shader hashes through Boxes.
- Allowed shaders to accept inputs from Boxes, even if the Box doesn't currently output a shader.
- Changed internal image coordinate system to have 0,0 at bottom left (formerly at top left).

0.76.0
======

- Added Application._executeStartupFiles() method (#354).
- Added RemoveChannels image node.
- Added a PointConstraint node (#482).
- Fixed framing error when entering a Box.
- Image viewer now displays channels in grey scale.
- Added Widget.widgetAt() method.
- Added ability to hide tabs in layouts.
- Fixed bug converting coshader array from fixed to variable length.
- Added Serialiser::postScript() method.

0.75.0
======

- Added a channel mask feature to GafferImageUI::ImageView. Use the r,g,b and a keys to isolate individual channels (#403).
- Updated for compatibility with Cortex 8.0.0a14.
- Updated screengrab app to allow the execution of a commands file.
- Added a node find dialogue, accessible via the Edit/Find.. menu item (#454).
- Added NodeGraph.frame( nodes ) method. This can be used to frame specific nodes within the viewport of the NodeGraph.
- Addressed thread related hangs when using an InteractiveRenderManRender and deleting or connecting nodes.

0.74.0
======

- Added a multitude of miscellaneous documentation improvements.
- Implemented parameterName.type RenderManShader annotation (#456).
- Implemented parameterName.coshaderType RenderManShader annotation (#460).
- Fixed disabled Shader pass-through bugs.
- Added variable length coshader array support to RenderManShader (#462).

0.73.0
======

- Implemented connection hiding for the NodeGraph. This is accessed by right clicking on a node in the Node Graph and using the new "Show Input Connections" and "Show Output Connections" menu items (#429).
- Fixed const correctness of GraphGadget::getNodePosition().
- Fixed connection drag bug. Dragging the endpoint of a connection around and then placing it back where it started was breaking the connection, whereas it should have been having no effect.
- Replaced Enabled/Disable node menu item with Enabled checkbox.
- Added titles to the node graph context menus.

0.72.2
======

- Fixed Box creation with nested connected plugs. This allows the creation of Boxes with shader nodes with input connections.
- Fixed removal of nodules from nodes in the graph ui when Plugs are removed.
- Fixed InputGenerator bugs and added python bindings and tests.
- Fixed Group bugs involving dynamically generated inputs and undo (#179, #210, #302).
- Tidied up node menu labels.
- Renamed WriteNode to ObjectWriter and ReadNode to ObjectReader (#17).
- Fixed minimum height of ramp editor (#445).
- Fixed empty messages from ErrorDialogue.ExceptionHandler.
- Added popup error dialogues for file save failures (#449).
- Fixed context used by interactive render nodes.

0.72.1
======

- Updated PySide build.
- Fixed bug expanding objects in viewer when a custom variable was needed by the computation (#438).
- Fixed boxing of RenderMan coshaders (#440).
- Fixed Qt 4.6 compatibility.

0.72.0
======

- Added workaround for weird focus-stealing behaviour in Maya.
- Added application variable to the scope available to the screen grab command.
- Added support for empty and relative paths in Gaffer.Path. ( #432, #324 )
    
    - Added root parameter to all path constructors. This is used to define the root when the path parameter is passed a list of items. Because python doesn't allow overloaded functions this is slightly awkward - see documentation of Path.__init__ for discussion of how this would break down into overloaded constructors when we move the implementation to C++.
    - Added Path.root() and Path.isEmpty() methods.
    - Added Path.setFromPath() method, which copies the elements and the root from another path. This should be used in place of code which formerly did path[:] = otherPath[:].
    
    Note that the new root parameter changes the parameter order for all Path (and derived class) constructors - if you were formerly passing a filter as a non-keyword argument you should now pass it as a keyword argument to avoid problems. Additionally, if you implemented a custom Path subclass, you need to add the root parameter to your constructor and update your copy() and children() implementations. The DictPath changes provide a minimal example of what needs changing.
    
0.71.0
======

- Variable substitution improvements
	- Added standard ${script:name} variable (#407)
	- Added custom script-wide variables accessible via the File->Settings menu (#407)
	- Added support for variable references within variables (recursive substitution)
	- Added environment variable and ~ substitution
	- Added standard ${project:name} and ${project:rootDirectory} variables.
- Fixed save and load of ReadOnly plugs.
- Removed Escape hotkey for leaving full screen mode. The same function is served by the ` hotkey.
- Defined default locations for ribs, ass files and rendered images.
- Added automatic directory creation for display, rib and ass locations (#59)
- Added GraphComponent::clearChildren() method
- Greyed out File->RevertToSaved menu item when it doesn't make sense
- Improved CompoundDataPlug data representation
- CompoundPlugValueWidget using PlugValueWidget.hasLabel() to avoid unecessary labelling
- Fixed UI for promoted plugs (#264)
- Fixed bug where deleted children of Boxes weren't removed from the selection (#430)
- Fixed bug where pinned nodes were still visible in the UI after being deleted (#308)
- Fixed hangs caused by adjusting colours while rerendering
- Tidied up some test cases

0.70.0
======

* Added Ganging for CompoundNumericPlugs (#402)
* Added menu item for loading renderman shaders from file (#125)
* Added color ramp editing support (#286)
* Added spline parameter support to RenderManShader::loadShader()
* Added shader annotations for passing default values to RenderManShader splines
* Added dividers in the NodeEditor, available to RenderMan shaders via the annotation "parameterName.divider" (#288)
* Added API for undo merging. 
* Added ScriptNode::undoAddedSignal() (#103)
* Fixed hiding of Menu when using the search box
* Fixed tab focus ordering in NodeEditor (#107)
* Improved GadgetWidget focus behaviour (#119)
* Fixed redundant CompoundNumericPlug serialisation (#2)
* Fixed scrubbing of values for IntPlugs
* Fixed size issues caused by TabbedContainer size policy (Settings and About window)
* Fixed bug in Random::affects()
* Fixed multiple undo entries in virtual sliders, cursor up/down nudging, color choser, and ramps (#400)
* Fixed Ctrl+C copy shortcut in non-editable MultiLineTextWidgets
* Hid Shader enabled plug in the UI (#398)

0.69.1
======

* Fixed bug with top level actions breaking searchable menus
* Fixed node reconnection crashes in ScriptNode::deleteNodes and StandardGraphLayout::ConnectNodeInternal

0.69.0
======

* Implemented drag and drop between plugs in the NodeEditor (#285)
    Drags are initiated on the label for the plug.
    Left drag initiates a drag for connecting plugs.
    Shift-left drag and middle drag initiate a drag for transferring values between plugs.
    Colours may now also be dragged from the viewer onto a plug.
    There are custom pointer icons for each type of drag (#44)
* Added blinking indication for plugs preventing the opening of a colour picker (#185).
* Implemented enabling/disabling for shader nodes (#327).
    By default disabled shaders behave as if their output connections didn't exist.
    RenderMan shaders may act as a pass-through by defining a "primaryInput" annotation naming an input coshader parameter.
* LinkedScene files (.lscc) are now previewable in the browser
* ImageReader only reads the necessary channel from the OpenImageIO cache
* Reverted non-gui ExecutableRender::execute() to block until the render is complete (#353).
* Fixed Nuke link error
* Fixed browser op mode
* Fixed missing Recent Files bug (#378).
* Fixed some bugs with extraneous dragBegins
* Removed namespace prefixes from typenames for displaying to the user (#389).
* Removed deperecated ModelCacheSource

0.68.0
======

* Improved speed of renderman shader menu.
* Image stats node in ImageView now uses the preprocessed input plug if the raw input is not an ImagePlug
* Removed right-click layout context menu.
* Added "Unpromote from Box" item to plug popup menu.
* Fixed menu title so it doesn't interfere with menu keyboard navigation.

0.67.0
======

* Fixed potential lockup with NumericPlugs.
* Fixed RenderMan ShaderMenu match expressions (broken in 0.66.0)
* Reintroduced the node name into the NodeEditor header.
* Exposed LayoutMenu submenu callable publicly.
* Implemented in-place renaming for user plugs (#213).
* Added support for RSL "parameterName.label" annotation (#372).
* Added a MapProjection node.
* Added sample window to the ImageViewer.
* Fixed UI test cases broken by the per-application menu commits.
* Can once again build for OS X.
* Added support for packaging as .dmg on OS X.

0.66.0
======

* Fixed interactive display.
* Fixed APIs to make UI resources per-application. When applications are updated to use these new APIS, they will no longer pollute each other's interfaces (#351, #225).
* Refactored GafferImage::Filter to have a better interface whilst removing the need for the construct() method.
* Added python bindings and enhancements for the GafferImage::Filter class.
* Fixed hash() bug in RenderMan coshader, which in turn fixes an interactive rerendering bug.
* Reduced occurences of accidental connection snatching (#313, #325).
* Fixed escape-to-close menu bug.
* Added an ImageStats node.
* Fixed deadlock when writing image files to disk.
* Op. Procedural and RenderMan shader menus may now be filtered to show fewer options.
* Added "cmd" parameter to screen grab app.
* Fixed GafferImage::FormatPlug::hash()
* Fixed duplicate typename errors (#330).
* Prevented promotion of non-serialisable plugs to Box level (#347).
* Fixed a bug in ImageProcessor that was causing a segfault when the node has an output that is not an ImagePlug.

0.65.0
======

* Added divisions plug to Plane node. 
* Added Cube and Sphere scene sources (#97).
* Added a Text node to GafferScene.
* Added labelling support to TabbedContainer auto-parenting mechanism.
* Added ImageViewer pixel inspection by dragging pixels to the script editor (#245).
* Added python bindings for Views (#323).
* Added screengrab app.
* Implemented Gaffer->About menu item (#6).
* Improved ImageView to allow subclassing (#323).
* Set the name attribute for lights properly in the Render node (#326).
* Fixed GLWidget for use inside Maya 2013.
* Fixed Recent Files menu bug (#333). 
* Fixed a bug in ViewportGadget drag event propogation.

0.64.0
======

* Added support for displaying RenderMan shader color parameters as plain numbers. This can be achieved by setting the "parameterName.widget" annotation to a value of "number".

* Added support for RenderManShader array parameters, including arrays of coshaders.

* Fixed redraw issue in searchable menus.

0.63.1
======

* Using Boost Filesystem version 3 (for compatibility with Cortex 8)

0.63.0
======

* Fixed promotion of dynamic colour plugs to Boxes.

* Fixed crash creating Merge node (#253).

* Fixed Gaffer module dependency on GafferImage.

* Display now obeys the default format (#280).

* Fixed circular references in plug popup menus.

* Fixed NumericWidget dragBegin errors.

* Newly created nodes are now connected in-stream where possible (#257).

* Fixed editability of user plugs.

* Added error handling for bad RenderManShader activator annotations.

* Improved automatic placement of filter nodes (#86).

* Fixed empty tab creation in Node Editor.

* Added interactive search for node menu.

* Reordered image filters so that they are displayed from most soft to most sharp.

* Added the Lanczos image filter.

* Fixed a bug with the Sinc image filter.

* Fixed the "streaking" issues when using the ImageTransform.

* Added subpixel filtering to the image Sampler.

* Implemented snapping during Graph Editor drags.

* Optimised node dragging in the Graph Editor.

0.62.1
======

* Fixed gl sharing widget bug when launching gaffer in maya

* ExecutableRenderer now always launches the render asynchronously to avoid locking the maya UI

0.62.0
======

* Fixed bug with promotion of CompoundPlugs to Boxes.

* Fixed ImageNode paste error (#251).

* Fixed BoolPlugValueWidget._updateFromPlug() to avoid setting plug value (#266).

* Fixed bug in Group operation (#269).

* Implemented RenderMan shader parameter activation via annotation expressions (#226).
    An activator is defined by a global annotation of this form :
        pragma annotation "activator.name.expression" "pythonExpression"
    The python expression may reference current parameter values by name, and also use the connected( "parameterName" ) function to query whether or not a parameter is connected.
    Activators are then assigned to specific parameters using annotations of this form :    
        pragma annotation "parameterName.activator" "name"

* Implemented annotation-based uis for RenderManLight node.

* Added a ComputeNode class, and refactored DependencyNode so it can be a useful base class for shaders as well.

* Fixed dirty propagation of Shaders through ShaderAssignments.

* Fixed 3delight workaround. GafferRenderMan now requires 3delight 10.0.138 or newer.

* Added rudimentary shader updates to InteractiveRender. Note that there are still problems whereby deadlocks sometimes occur so this isn't in a state where you'd want to bet the success of any public performances on it.

* Fixed an issue with the glBlendingMode that was causing the result to be pre-multiplied twice.

* Fixed an image rendering issue with data/display window mismatches.

* Fixed banding and dark edges evident in 2D viewer (#74).

* Improved speed issues when moving single nodes in the NodeGraph by refactoring GraphGadget::connectionGadgetAt (#283).

0.61.0
======

* Fixed bug in MultiSelectionMenu so that if only one selection is available, it is displayed by name rather than as "All".

* Added image Sampler and Filter API classes.

* Added an image Reformat node.

* Added an ImageWriter node.

* Added RecursiveChildIterator API class.

* Fixed noodle-snatching to work with Shader nodes.

* Node Graph label now uses "/" as a separator for Box paths, rather than ".".

* Fixed layouts to allow panels to be collapsed fully and smoothly - addresses issue #93.

* Added workaround for PyQt/PySide pyqtSignal/Signal differences.

* Fixed "CameraController not in motion" errors. These occurred when the user accidentally moved the mouse scroll wheel while performing a drag to move the camera. We now ignore wheel events when dragging the camera.

* Removed unecessary collapsible section in Group UI.

* Fixed ImageReader to work with offset data windows.

* Fixed node auto-connection to work with Shader nodes (and other nodes with nested plugs).

* Added auto-connection and auto-positioning for pasted nodes (#13).

* Added inherit argument to Metadata query functions (#232).

* Fixed negative data window origins in image module.

* Added subdivision attributes to ArnoldAttributes node.

* Renamed Assignment node to ShaderAssignment.

* Added Reference node, providing the ability to reference in external scripts to facilitate collaborative workflows (#228).

* Added popup plug labelling to the NodeGraph (#138).

* Added connection snapping to the NodeGraph - connections dragged onto a node will snap to the nearest compatible plug.

* Added ImageTransform node (#96).

0.60.0
======

* Expansion state of collapsible plug grouping is now remembered for the duration of a session (#87).

* Current tab in Node Editor is now remembered for the duration of a session (#87).

* Fixed a bug in the NodeGraph where setTitle() was having no effect.

* Slowed wheel zooming (#200).

* Fixed crash when dragging nodes (#211).

* Improved NodeEditor node labelling (#151).

0.59.0
======

* Fixed save/load of user plugs created via the UI (#174).

* Fixed UI for generic Options and Attributes nodes.

* Removed collapsibility of Transform node's transform plug as it just cluttered up the UI.

* Removed collapsibility of Attribute node's attributes plug as it just cluttered up the UI.

* Removed collapsibility of Lights node's parameters plug as it just cluttered up the UI.

* Fixed MeshType::affects() (#175).

* Fixed SceneInspector update (#176).

* Improved SceneInspector shader representation (#147).

* Improved SceneInspector numeric formatting (#88).

* Added drag and drop node connection re-wiring (#78).

* Added virtual slider for NumericWidgets, engaged using LeftClick + Control or ShiftControl (#79).

* Fixed dirty propagation for Light nodes.

* Added first implementation of interactive rerendering in the InteractiveRenderManRender node. (#141)

* Deleting nodes attempts to rebuild the network to act as if the deleted nodes had been disabled (#95).

* Viewports can be panned/tracked using middle mouse with no modifier key (#28).

0.58.0
======

* Fixed creation of nodes within Boxes - previously they were added below the root of the script rather than inside the box.

* Fixed unstable scene hierarchy expansion (issue #120).

* Fixed highlighting bugs whereby widgets inside a highlighted tab would incorrectly display an inherited highlight state. This could be seen when dragging a node into the node editor with either nested tabs or a nested VectorDataWidget.

* Fixed PathPlugValueWidget bug where it would attempt to change the value of a read only plug.

* Fixed PathWidget bug where it would still do autocompletion and popup menus even when non-editable.

* Added TabbedContainer.insert() method.

* Generalised the Metadata system to store arbitrary values rather than just descriptions.

* Fixed CompoundPlugValueWidget bug whereby it would error if a summary was provided on a non-collapsible UI.

* Added right-click context menus to enum and checkbox plug uis.

* Added Box plug-promotion feature (#142).

* Removed Gaffer.GroupNode (#164).

* Fixed ordering of parameters in RenderManShader UI (#136).

* Fixed banding and dark edges evident in 2D viewer (#74).

* Fixed awkward zooming of Viewers and NodeGraph (#46).

0.57.0
======

* Renamed ColorPlug child names to rgba rather than xyzw (issue #133).

* File->SaveAs... menu item now adds the file to the recent files list.

* Fixed unwanted vertical expansion of color plug widgets.

* Removed the unwanted visualisation of the "name" plug on shaders in the Node Graph.

* Added NodeGraph plugContextMenuSignal() and connectionContextMenuSignal() to allow customisable right click menus for plugs and connections (issue #122).

* RenderManShader annotations are now correctly reloaded when the shader itself is reloaded.

* RenderManShader UI produces more sensible errors when bad annotations are discovered.

* Fixed parameter ordering in RenderManShader UI (issue #136).

* Fixed bug which prevented numeric plug entry fields from showing the correct value when values outside the allowable range were entered.

0.56.0
======

* RenderManShader node now supports the use of annotations within the shader to define the node UI. Annotations follow the OSL specification for shader metadata.

* Added the GafferUI.Metadata class, which will be used to provide things such as node and plug descriptions for the generation of tooltips and reference documentation.

* Added a Prune node, for removing whole branches from a Scene (issue #70).

* The Menu class now supports the description field of menu items, displaying descriptions as tooltips.

* The Menu class now supports the passing of the menu to callables registered as subMenus.

* Added a "File/Open Recent" menu item (issue #118).

* Added the ability to reload RenderManShader nodes, updating them to reflect any changes to the shader on disk. This is done automatically on file load and can be performed manually at any time using the new button in the node editor.

0.55.0
======

* Fixed graphical glitches caused by icons overlapping the edge of the editors on the Gnome desktop.

* SceneProcedural now renders general VisibleRenderables too.

* Fixed SceneReader to read animation at the correct speed (issue #68).

* File->Quit and the window close icon now prompt the user to confirm before closing if there are unsaved changes (issue #19).

* Added support for shader parameters of type "shader" in the RenderManShader node - these are mapped to plugs which accept connections to other RenderManShaders, allowing the creation of networks of coshaders.

0.54.0
======

* Added base classes Executable and Despatcher and two derived Node classes: ExecutableNode and ExecutableOpHolder.

* Added an enabled/disabled plug to all SceneNodes. Nodes with no inputs output an empty scene when disabled, and SceneProcessors output the first input unchanged. The enabled/disabled state can be toggled using the node right click menu or the "d" hotkey in the Graph Editor.

* Added SceneNode::hash*() methods to match the GafferScene::compute*() methods. This was necessary for the enabled plug to be implemented, and also makes the implementation of derived classes more readable. Matching pairs of hash*() and compute*() methods should be reused as a pattern throughout Gaffer where appropriate in the future.

* Renamed SceneElementProcessor::process*() methods to SceneElementProcessor::computeProcessed*() and SceneElementProcessor::hash*() methods to SceneElementProcessor::hashProcessed*(). This was necessary to resolve conflicts with the name hash*() methods at the SceneNode level.

* Removed the ability to return distant descendants from the GraphComponent::getChild() function. Also modified GraphComponent method signatures to use InternedString where appropriate. This change alone gives a 10-15% speedup in evaluating a benchmark GafferScene network.

* Added GraphComponent::descendant() method to replace the lost functionality in GraphComponent::getChild().

* Fixed bug whereby ViewportGadget sent keyReleaseSignal() to the keyPressSignal() of child Gadgets.

* Added Style::renderLine() method.

* VectorDataWidget now supports InternedStringVectorData. This makes it possible to view InternedStringVectorData in the browser app.

* Fixed errors caused by trying to view a SceneReader with an empty filename.

* The currently active tab for each panel is now saved with each layout.

* Renamed GraphEditor to NodeGraph - the previous name was confusing to users. Renaming all the classes rather than just changing the label, because we want a fairly straightforward mapping from UI->API to help users make the transition into scripting.

* Multiple shortcuts may now be specified for each menu item by passing a comma separated list of shortcuts in the "shortCut" field of the menu item.

* EditMenu now uses both backspace and delete as shortcuts for the delete action.

* Double-clicking a node in the Node Graph now makes any Node Editor tabs editing that node visible by making them the current tab.

* The ` key (left of the 1 on the keyboard) may now be used to toggle in and out of fullscreen mode.

* Renamed SceneEditor to SceneHierarchy to be more explicit that it visualises the scene graph and doesn't really provide much in the way of editing.

* Renamed TimeEditor to a more user friendly Timeline.

* The File->SaveAs... menu item now ensures that the file saved always has a ".gfr" extension.

* Added Scene->Object->Modifiers->MeshType node for converting meshes between polygons and subdivs, and optionally adding normals when converting to polygons.

* The Scene Inspector now displays mesh interpolation.

* Fixed bugs which could prevent the UI updating appropriately when plug values were changed.

* Optimised redundant updates in the SceneHierarchy editor.

0.53.0
======

* Added the concept of a global format for disconnected nodes along with a format plug.

* Added the Constant node for GafferImage.

* Added the Select node for GafferImage.

* Fixed a bug which prevented Assignment nodes from being connected to Shaders outside the Box containing the Assignment.

* Improved formatting in NumericWidgets.

* Added NumericWidget.valueChangedSignal().

* Fixed bug where editing a numeric plug value using cursor up/down didn't immediately update.

* Added CompoundDataPlug::addMember() and CompoundDataPlug::addOptionalMember() overloads which take a ValuePlug instead of Data to provide the value for the member.

0.52.0
======

* The Gaffer clipboard now synchronizes with the global system clipboard, allowing nodes to be cut and pasted between external applications.

* Fixed a bug which meant that the Viewer didn't update if a view became dirty while it wasn't the currently active view.

0.51.0
======

* Switched Arnold import in ArnoldRender.py to a deferred import, to allow 3delight renders of scenes containing Arnold nodes

* Added a Grade node to GafferImage

* Added a Merge node to GafferImage

* Added option to disable highlight in GafferUI.Button

* Fixed exception caused by undefined subMenuDefinition in GafferUI.Menu

* Catching all exception types in ErrorDialogue

* Image nodes can now be disabled.

* Renamed ExpressionNode to simply Expression.

* Multithreaded the ImagePlug class.

* Fixed ParameterValueWidget.create() so that it always returns either None or an instance of ParameterValueWidget. Previously it was returning PlugValueWidget instances where no specific ParameterValueWidget registration had been made.

* Added PlugValueWidget setReadOnly/getReadOnly methods. These can be used to force a ui to be read only when the plug itself allows editing. Note that they can not be used to force editing when the plug itself is not editable.

* Fixed BoolPlugValueWidget so that it correctly disables the checkbox if the plug is not writable for any reason, or is setReadOnly( True ) has been called.

* PlugValueWidget.popupMenuSignal() now passes the PlugValueWidget itself to slots rather than the Plug as it did before. The plug can retrieved by calling plugValueWidget.getPlug().

* ParameterValueWidget.popupMenuSignal() now passes the ParameterValueWidget itself to slots rather than the ParameterHandler as it did before. The parameter handler can be retrieved using parameterValueWidget.parameterHandler().

* Added readOnly parameter to ParameterisedHolderNodeUI constructor.

* ParameterValueWidget now requires that the topLevelWidget passed to the constructor is always an instance of PlugValueWidget. This is made available via a new plugValueWidget() method.

* CompoundPlugValueWidget now requires that the result of _childPlugWidget either derives from PlugValueWidget or must have a plugValueWidget() method which returns a PlugValueWidget. This allows it to implement a new childPlugValueWidget() method which can be used to get access to the widget for a child plug. This is building towards a time when the NodeUI class provides a single method for retrieving the PlugValueWidget for a given plug.

* Added ValuePlug::settable() method.

* The VectorDataWidget now allows tooltips to be specified on a per-column basis using the columnToolTips argument to the constructor.

* The CompoundVectorParameterValueWidget now constructs tooltips for the columns using the descriptions for the child parameters.

* Added drag support to PathListingWidget and VectorDataWidget.

* ViewportGadget now forwards the keyPress and keyRelease signals to its child.

* GadgetWidget now allows the viewport to be changed using setViewportGadget(), and the previous viewportGadget() accessor has been renamed to getViewportGadget().

* ParameterisedHolder now calls the parameterChanged() methods of the classes held by ClassParameters and ClassVectorParameters when their parameters change, rather than calling the method on the top-level parameterised class.

* CompoundPlugs now accept input CompoundPlugs with more plugs than necessary, provided that the first N input child plugs match the N child plugs of the output. This allows Color3fPlugs to receive input directly from Color4fPlugs and arnold COLOR3 parameters to receive input from arnold COLOR4 outputs.

* ArnoldOptions node now allows the specification of texture, shader and procedural searchpaths.

* ArnoldRender node no longer specifies procedural location using a full path, allowing the procedural searchpath to be used if it has been set by an ArnoldOptions node.

* Fixed crash when evaluating a ContextProcessor containing an entry with an empty name.

* Added CompoundDataPlug::addOptionalMember(). This works as for addMember(), but adds an additional BoolPlug to allow the user to enable/disable that member. Both methods also take an additional parameter to specify the name of the plug used to represent the member.

* ArnoldOptions and ArnoldAttributes nodes now create their plugs with sensible names, and allow options and attributes to be enabled and disabled - by default they are all disabled.

* Added a File/Settings... menu option which opens a window for editing the plugs of the ScriptNode.

* Gaffer::CompoundDataPlug now handles Color4fData.

* Added a GafferScene::OpenGLAttributes node for controlling the drawing of objects in OpenGL.

* Gaffer::TypedObjectPlug::setValue() now references the value directly rather than taking a copy.

* Fixed bugs which prevented the ColorChooser working with colour types with an alpha channel.

* Added a procedural app for visualising Cortex procedurals.

* Plug::getInput() now returns a raw rather than reference counted pointer.

* Added RenderableGadget::selectionBound() method which returns the bounding box of all selected objects.

* Added View::framingBound() method which can be overridden by derived classes to control the framing behaviour when "F" is pressed.

* SceneView now frames the current selection when "F" is pressed.

* IndividualContainer::getChild() now returns raw pointers rather than smart pointers and uses a direct method of indexing.

* Gadget::getToolTip() now takes a line in gadget space, allowing the tooltip to be varied with the position of the mouse.

* RenderableGadget implements getToolTip() to display the name of the object under the mouse.

* PathMatcher is now editable after construction, with addPath() and removePath() methods. Because of this the copy constructor also now performs a full deep copy which can be expensive.

* Added PathMatcherData to make sharing PathMatchers easy, and to introduce the possibility of storing them in Plugs and Contexts. Copying is lazy-copy-on-write which can be used to avoid the expensive PathMatcher copy constructor where possible.

* Added Context::names() method.

* EditorWidget._updateFromContext() is now passed a set containing the names of items changed since the last call to _updateFromContext().

* Fixed bug which caused PathListingWidget.selectionChangedSignal() to fire far too frequently.

* Added a GraphLayout class, used in conjunction with the GraphGadget to perform automatic node connections and graph layout. This replaces ad-hoc code from NodeMenu.py. Still needs a decent fully automatic layout implementation for situations where the user doesn't build the graph manually.

* Added Plug::source() method.

* Added GraphGadget::nodeGadgetAt() method.

* GraphGadget now uses middle mouse drag for sending nodes to other widgets - left mouse drag is for moving nodes only. Shift drags can be used to add nodes to the current selection.

* TabbedContainer switches tabs automatically on drag enter, to allow drags to access targets that aren't current at the start of the drag.

* Expression node now supports calls to context.getFrame() and context.get() in addition to context["name"] dictionary style access. The get( name, defaultValue ) method is particularly useful when an expression may be executed in a context without the required entry.

* ScriptEditor no longer displays the result of execution if the result is None.

* Replaced RenderCamera node with more general StandardOptions node, which will define all the render globals type stuff that can be shared between renderers. Fixed bug in hash computation of GlobalsProcessor. Removed resolution from camera, putting it on the StandardOptions node instead.

* CompoundPlugValueWidget can now display a summary of the plug values in the collapsible header. Used this to provide useful summaries for all options and attributes nodes in GafferScene. Renamed in OpenGLAttribute plug for consistency with the others.

* Fixed SceneEditor bug which meant that items were only displayed if the first selected node contained them.

* Added TransformPlugValueWidget which provides a useful summary of the transform in the collapsible header.

* Added ScenePlug::fullAttributes() method which returns the full set of inherited attributes at a particular scene path.

0.36.0
------
* Improved bindings by removing macros and replacing them with proper wrapper classes.

* Added Window.childWindows() method.

* Added initial (and limited) support for Parameterised::parameterChanged() methods. Currently only modifying parameter values is supported in parameterChanged() - support for modifying user data and presets will be added in later revisions.

* The input and output connections for selected nodes are now drawn highlighted.

* Added BlockedConnection class in C++. This handles the blocking and unblocking of connections in an exception-safe manner.

* Added Node::plugFlagsChangedSignal().

* Added Plug::ReadOnly flag, to allow plugs to be locked against modification of the input or value.

* Added support for ["gaffer"]["readOnly"] bool parameter user data, mapping it to the Plug::ReadOnly flag. This user data may be modified in a ParameterModificationContext or in a Parameterised::parameterChanged() callback.

* StringPlugValueWidget and PathPlugValueWidget now correctly set their text entry field to read only when the plug is read only.

* PresetsOnlyParameterValueWidget now displays in a disabled state when a plug is not writable.

* Fixed C/C++ Object already deleted test messages caused by DeferredPathPreview.

* Fixed lifetime issues with ScriptWindows - they may now be constructed directly or acquire()d directly and their lifetime will be as expected (managed by the caller). ScriptWindow.connect() continues to operate as before - managing the lifetime of windows to correspond with the lifetime of scripts in the application.

* Fixed problems caused by serialising plug flags as All - they would then acquire new values when loaded in a future where there are new flags available.

* Added a SubTree node, for taking a branch of the tree and rerooting it back to /.

* Fixed bug in ConnectionGadget::bound() which meant that sometimes the graph would not be framed correctly when first displaying a GraphEditor.

* Fixed ColorChooserDialogue to actually use the colour passed to the constructor.

* Window.addChildWindow() now always causes the child window to remain on top of the parent. Previously, this was documented as the behaviour, but it only worked for child dialogues which subsequently went into a modal state. This is achieved by setting the QtCore.Qt.Tool window flag - this is much better than WindowStaysOnTopHint because it hides the child window when the application becomes inactive on the mac - otherwise the window would remain on top of the windows for the newly activated application.

* Fixed bug where colour chooser would remain after the parent swatch died, but be inoperative. It now remains but is still functional.

* Added GafferScene::PathMatcher class, which provides accelerated path matching for use in the PathFilter.

* PathFilter now supports * as a wildcard to match any portion of a name.

* PathFilter now supports ... as a path entry, to match any number of entries.

* Added a ParameterPath class for navigating Parameter hierarchies.

* Fixed bug which prevented CompoundVectorParameters from being saved in presets.

0.35.7
------

* Fixed bug which caused Windows to be hidden when being added as the child of another Window.

* Window.setVisible( True ) now ensures that the Window is unminimized and raised where necessary.

* Added NodeEditor.acquire() method, to allow other UI elements to request that a Node editor be shown in some way for a specific node.

* Double clicking a node in the graph now shows a floating Node Editor for that node.

* Added MultiLineTextWidget.dropTextSignal(), making it easy to implement drag and drop for different datatypes. This simplifies the ScriptEditor implementation somewhat.

* Added an improved ui for editing expressions. Context menu on plugs allows for creation and editing of expressions, and the expression editor accepts drag and drop of plugs.

* Random node no longer errors when context items are missing - this prevents the UI from erroring when scene:path etc is not available.

* NumericSlider now allows specification of hardMin and hardMax values to control what happens when the slider is dragged outside of the widget area.

* Slider now draws the position differently to indicate when the position is outside of the widget area.

* Fixed ColorChooser bugs caused by dragging sliders outside of sensible ranges - the ranges are now enforced.

* Added GafferUI.DisplayTransform class for managing colour transformations from linear to display space. Updated ColorSwatch and ColorChooser classes to use this, and added ocio.py config file to set up the transform using PyOpenColorIO.

* Added GafferUI.ExecuteUI module with functionality for executing nodes, repeating previous executions etc. This provides a new execute menu in the main menu, and a right click menu item in the graph editor.

* Fixed bug which meant that dynamic CompoundNumericPlugs would fail to restore their connections upon script load.

* Arnold shaders may now be connected together to form networks, and they may have non-shader inputs (such as the Random node) which can be evaluated on a per-object basis to provide additional variation.

* Fixed error caused by browser preview tab.

0.35.6
------

* Fixed problem where VectorDataWidget would grow to claim size it couldn't use.

* VectorDataWidget now scrolls to show the new rows when rows have been added.

* RenderableGadget now implements click and drag signal handlers to manage a set of selected objects.

* Fixed bug where MultiLineTextWidget would emit textChangedSignal whenever setText was called, regardless of whether or not it made any changes.

* Added insertText, setCursorPosition, getCursorPosition, cursorPositionAt, setFocussed and getFocussed methods to MultiLineTextWidget.

* ScriptEditor now accepts drops for scene objects, plugs, and nodes, which can be dragged from the Viewer and the GraphEditor.

* Added Widget.parentChangedSignal(), which does what you'd expect from the name.

* Improved default sizing for OpDialogue.

* Fixed CompoundParameter UIs to respect the ["UI"]["collapsed"] user data entry.

* CompoundPlugValueWidget now has a collapsed constructor argument to replace the previous collapsible argument. This takes None, True or False as values, allowing the ui to be created as non-collapsible, collapsed or expanded.

* Disallowing null values in plugs. This fixes bugs in the computation of hashes (all null values hashed the same, regardless of type, or what the actual default value was), and also simplifies coding (no more need for tests against null before using an Object).

* Fixed bug where setting SplinePlug to a value with less points than before raised an Exception.

* Fixed bug where SplinePlug::setToDefault did not work as expected.

* Added ValuePlug::setCacheMemoryLimit() and ValuePlug::getCacheMemoryLimit(), to allow management of cache memory usage. Added startup/gui/cache.py to expose this to the user via the preferences.

* Fixed bug which prevented user preferences from loading.

* Improved drawing of very thin/small selection boxes - they had a tendency to disappear before.

* Added Widget setHighlighted() and getHighlighted() methods, implementing highlight-on-hover for buttons and sliders.

* Implemented drop of items into VectorDataWidget. This allows objects from the viewer to be dragged and dropped into a filter to perform assignments.

* PlugValueWidget.popupMenuSignal now passes the PlugValueWidget to slots instead of the Plug.

* Fixed bug where ColorPlugValueWidget would attempt to show colour pickers for non-editable plugs, resulting in errors.

* NodeUI now also shows output plugs. They can be removed as necessary by registering None with PlugValueWidget.registerCreator().

* ModelCacheSource now uses the new ModelCache class provided by Cortex.

* Added a Random node, for producing random floats and colours based on a seed and a context item.

* Fixed bug where plug popup menus tried to edit plugs which were not editable.

* Fixed bug where the effects of TextWidget.setEditable() did not update the appearance of the widget.

* Fixed bug which caused ExpressionNode to crash when the expression was changed while the output plug was being viewed by the UI.

* Fixed bug which caused errors when connecting compatible children of CompoundPlugs together, if the CompoundPlugs were not themselves compatible enough for a complete connection between all child plugs to be made.

* Fixed bug which prevents ExpressionNode from accepting a Plug with direction()==In as an input to the expression.

* Fixed bug whereby GadgetWidget was passing buttonDoubleClick signals to buttonPress signals on the held gadget.

* Added GraphEditor.nodeDoubleClickSignal().

0.35.5
------

* Fixed graphical glitches caused by incorrectly applying visibility to children of TabbedContainer - this affected the preview section of the browser app particularly badly.

* Added a reportErrors parameter to the OpMatcher constructor - this defaults to True (same behaviour as before) but can be set to False to silence error reporting while loading ops. Note that the OpMatcher used by the BrowserEditor may be customised by implementing the Mode._createOpMatcher() method - this would be the place to pass reportErrors=True.

0.35.4
------

* Added a GafferBindings::NodeClass class, which simplifies the binding of Node derived classes. It is now a one liner to bind a typical extension node.

* The op app now has an arguments parameter which can be used to specify the parameter values for the op.

* The op app now has a gui parameter. When this is true a gui is presented, when it is false the op is executed directly on the command line.

* Added the GafferScene and GafferSceneUI modules. These will allow the generation and editing of scene graphs.

* Fixed RunTimeTyped registration of Gaffer::CompoundPlug.

* Fixed behaviour when a Widget doesn't have a tooltip - it now correctly looks for tooltips on parent Widgets until one is found.

* Added a GafferUI.NumericSlider widget.

* The Viewer now correctly updates when the context has changed. The EditorWidget no longer calls _updateFromContext() at awkward times.

* Added a simple TimeEditor for manipulating the current frame.

* Fixed GIL problems caused by passing multithreaded python procedurals to RenderableGadget.

* Fixed GIL problems when emitting signals with python slots from a thread which does not currently hold the GIL.

* Added an ExpressionNode class.

* PlugValueWidgets now have setContext and getContext methods, and update correctly when the context changes if a plug has input connections.

* Added a Gaffer.TransformPlug class, for specifying transformations.

* Removed NodeUI.createPlugValueWidget() registeredWidgets only parameter.

* Added PathListingWidget setPathExpanded, getPathExpanded, setExpandedPaths, getExpandedPaths and expansionChangedSignal methods.

* Added the GafferImage and GafferImageUI modules, for tile based image processing.

* Removed deprecated StandardNodeGadget::acceptsNodule() method, and associated StandardNodeGadget( node, deferNoduleCreation ) constructor. Nodule creation should now be controlled entirely by the Nodule factory mechanism.

* The Application base class now automatically creates an ApplicationRoot and makes it available via the root() method. Derived classes should use this rather than create their own. The Application base class now also makes sure that all startup files have been executed before the application is run, so derived classes may not now call _executeStartupFiles themselves (it is now protected). Additionally the doRun() method has
been renamed to _run, to be more in keeping with general python philosophy.

* The WeakMethod class now throws a more useful exception when called on expired instances.

* Fixed bug whereby menus were never destroyed due to a circular reference. This masked other bugs whereby some uis weren't maintaining a reference to their menus to keep them alive - it's now essential that this is done.

* Fixed bug which prevented dynamic output CompoundNumericPlugs serialising correctly.

* Fixed problems caused by PlugValueWidget.__init__ calling _updateFromPlug() at a point when the derived class is not fully constructed. PlugValueWidget.__init__ no longer calls _updateFromPlug(), so derived classes should now call it at the end of their __init__ method.

* ColorPlugValueWidget now has numeric fields for editing the colour, in addition to the
swatch.

* ContainerGadget can now add padding around the children, accessed using the new setPadding() and getPadding() methods.

* StandardNodeGadget can now be used in a vertical orientation as well as a horizontal one. This will be useful for making graphs which better suit a horizontal flow (shaders for example).

* Fixed IECore::RunTimeTyped registration for CompoundNumericPlug types.

* Added GafferArnold module.

* Added Label.linkActivatedSignal(), for reacting to HTML links in label text.

* Fixed flickering caused by MenuBars appearing briefly on screen before being parented.

* Added MultiLineTextWidget setWrapMode, getWrapMode, appendHTML, linkAt and linkActivatedSignal methods.

* Added a PopupWindow class.

* Fixed the Slider button press handler to swallow the events it uses.

* Added Window setPosition() and getPosition() methods.

* Moved NodeUI.registerPlugValueWidget() functionality into PlugValueWidget.registerCreator().

* Removed NodeUI._build() method. Derived classes should instead pass a topLevelWidget to the constructor if they wish to be in control of the ui construction.

* GafferUI.EventLoop now disables any idle callbacks which error during execution.

* Added Node::acceptsInput virtual method, to allow nodes to reject connections.

* Added a Widget.bound() method.

* Added GadgetWidget.positionToGadgetSpace() method, for converting Widget-relative positions into Gadget-relative lines.

* Added a GraphEditor.graphGadgetWidget() method.

* Nodes created via the NodeMenu are now automatically connected to the selected nodes, and positioned based on those connections.

* Parameter help for CompoundParameters (and derived classes) is now available as a tooltip on the label of the Collapsible ui.

* The op application now has an arguments parameter, which can be used to specify the initial values for the parameters of the op (backported from trunk).

* The python application now has an arguments parameter, which can be used to specify an arbitrary list of strings to be provided to the python script in a variable called argv.

* VectorDataWidget now allows a minimum number of visible rows to be passed in the constructor. Previously a similar behaviour was implemented internally with the minimum hardcoded to 1 - the new default is now 8. This improves the layout of CompoundVectorDataParameters.

* Added workaround for Qt problems which caused VectorDataWidget to sometimes be clipped on the right hand edge.

0.35.3
------

* Fixed LayoutMenu delete function

0.35.2
------

* Added a minimum size of the OpDialogue

0.35.1
------

* Removed ParameterValueWidget._addPopupMenu and _popupMenuDefinition, replacing them with PlugValueWidget._addPopupMenu and _popupMenuDefinition. This makes the parameter preset menus automatically available on all parameter uis, and provides for easy extension in the future (menus for manipulating plug inputs, expressions, locking etc). Note that if you previously had a custom ParameterValueWidget class with a _popupMenuDefinition() override, then it will no longer work - use ParameterValueWidget.popupMenuSignal() instead.

* Removed ToolParameterValueWidget, replacing it with ToolPlugValueWidget which has identical functionality (but applicable to Plugs too).

* Fixed bug which caused the filename column to become too wide when switching to Op browsing mode in the browser and then back to files.

0.35.0
------

* Sequence Path displays file sequences with a single frame

* Reverted changes made in Widget class about "apply visiblity"

* OpDialogue now supports op.userData()["UI"]["buttonLabel"], for specifying a custom label for the OK button.

* Removed requirement of the boost build having a patched python library capable of participating in garbage collection.

* Fixed bug in Collapsible when calling setChild() with a widget currently parented elsewhere.

* Fixed various GafferUI.Container bugs which prevented successful transfer of Widgets between containers.

* Added workarounds for unwanted Qt behaviours - parentless Widgets becoming top-level windows, and widgets being hidden when reparented.

* Added setClassLoader and getClassLoader methods to the op application. These may be used by configuration files to customise the loading of ops (the application is available as an "application" variable to the startup scripts).

* Calling BrowserEditor.registerMode() with the label of an existing mode now overrides the previous registration, rather than adding a second with an identical name.

* The standard BrowserEditor modes are now accessible publicly as BrowserEditor.FileSystemMode, BrowserEditor.FileSequenceMode and BrowserEditor.OpMode.

* The browser OpMode now takes an additional classLoader argument to the constructor, allowing the use of custom class loaders.

* The ParameterValueWidget.registerType() method now accepts an optional uiTypeHint argument, which allows the registration of custom uis, which parameters can request using the standard ["UI"]["typeHint"] userData entry.

* Added ValueType class members to TypedObjectPlug bindings, so that appropriate values
can be constructed easily.

* GraphComponent.children() python method now accepts a typeId to filter the result.

* Fixed bug which meant that colour swatches for plugs had the wrong colour when first shown.

* Simplified EditorWidget implementations by removing setScriptNode() method - now the scriptNode is always provided at construction and cannot be subsequently changed. Renamed ScriptWindow.getScript() to ScriptWindow.scriptNode() and EditorWidget.getScriptNode() to EditorWidget.scriptNode() for consistency. 

* Menus now support a "shortCut" entry in the MenuItemDefinition to provide keyboard shortcuts. The standard application, file and edit menus now provide the expected shortcuts, and are greyed out appropriately when they cannot be used for whatever reason.

* Added ScriptNode undoAvailable() and redoAvailable() methods.

* CompoundNodule now supports a vertical orientation, specified using a new argument to the constructor.

* GafferUI.LinearContainer now supports decreasing as well as increasing child ordering, controlled with the setDirection() and getDirection() methods.

* Fixed ordering of nodules in vertically oriented NodeGadgets.

* PathPlugValueWidget doesn't update the plug value as you type any more - this was causing constant computation with invalid values. The value is now only set when editing finishes.

* Fixed problems with PathChooserWidget which meant the wrong file/directory was displayed on opening (truncated by one).

* ParameterValueWidget popup menus may now be customised by external code, using the ParameterValueWidget.popupMenuSignal().

* The Path class now implements a much more readable __repr__.

* The DictPath class now accepts an additional "dictTypes" argument to the constructor, which can be used to define what types it considers to be branches in the path (all other types are considered leaves).

* The OpMatcher.defaultInstance() function now takes an optional classLoader argument, which is used to create the shareable OpMatcher.

* The BrowserEditor.Mode class now has a _createOpMatcher() method which may be overridden by derived classes. Typically this would be overridden to use a custom ClassLoader for the ops.

* Moved Label.VerticalAlignment and Label.HorizontalAlignment enums to GafferUI namespace - to allow their use in other parts of the API. They are temporarily available under their old names for backwards compatibility.

* GridContainer.addChild() now accepts an alignment parameter to control alignment of the child within its cells.

* Path setFromString, append and truncateUntilValid methods now return self, to allow easy chaining and use in list comprehensions.

* Fixed problem which could cause MultiLineTextWidget to raise an Exception when losing focus as part of a ui being destroyed.

* Fixed SelectionMenu so that standard python strings (and not QStrings) are returned from the getCurrentItem() and getItem() methods.

* Added support for loading and saving presets for ops and other Parameterised classes.

* The OpPathPreview is now more flexible in what it considers to be a ClassLoader for ops, to provide better support for custom ClassLoaders.

* The PathListing widget now allows multiple levels of hierarchy to be expanded, by holding either Shift (all levels) or Control (one level) while expanding a level. In addition, expansionChangedSignal() is not emitted only once for batched changes, such as those caused by setExpandedPaths() and the new recursive expansion/collapsing.

* Layouts now remember their correct splitting ratios when they're saved. Added a useful layout for use with scenes.

* The ExpressionNode now supports string as well as numeric output types.

* The execute app now operates over frame ranges defined using the -frames command line argument.

* When not in gui mode, the Render node waits for the render subprocess to complete before returning from execute().

* StringPlug inputs now automatically substitute $name, ${name} and ### tokens using values from the current context when their value is accessed during a computation. This behaviour can be controlled using the new PerformsSubstitutions plug flag.

* Node computations are now cached in memory and reused when possible. Hashes representing computations are available using the ValuePlug::hash() method, and Node implementations must now implement the new Node::hash() method to assist in computing hashes.

* Added GraphComponent::getChild( childIndex ) method, providing constant-time access to children by index. This improved the implementation of SplinePlug, ChildSet and the GraphComponent __getitem__ method in Python.

* The op application now supports the loading of presets at launch, using the new "-preset presetName" command line option.

* Added a simple ConfirmationDialogue class.

* Presets are now stored in subdirectories based on class name, to avoid clashes between presets for different classes.

* Added a small UI for deleting presets.

* Resolved browser errors caused by broken symlinks. FileSystemPath now returns True for isValid() if a path is a broken symlink (it seems unreasonable for children() to return invalid paths) and falls back to os.lstat() to generate path info if os.stat() fails due to a broken link.

* Fixed problem where SequencePath would error in info() when given an invalid base path. Now it returns None as expected.

0.34.0
------

* Added support for ClassVectorParameters.

* Added a -help flag to the gaffer command line.

* Fixed parameter menu bug introduced in version 0.33.2.

* Added support for TimeCodeParameters.

* Menu.popup() method now takes an optional grabFocus parameter - if this is False and a key is pressed then the menu will close and pass the key to the previous focus widget.

* PathWidget's helpful popup menus are now more helpful because they don't steal keypresses from the PathWidget itself.

* TextWidget now supports having a fixed width defined in characters using the setCharacterWidth() and getCharacterWidth() methods.

* NumericPlugValueWidget now sets maximum field width for integer plugs where max values has been set - this slightly improves the ui for the TimeCodeParameterValueWidget.

0.33.2
------

* Fixed the delete order of ListContainer that was causing popup windows

* Fixed circular reference in menu that was causing popup windows

0.33.1
------
* Fixed bug in Menu

0.33.0
------
* Added a MenuButton class to GafferUI.

* The GafferUI.Spacer class now specifies a maximumSize in addition to the previous minimumSize.

* Added support for ClassParameters.

* Improved formatting of Parameter tooltips, and worked around Qt crash caused by having "\n\n" in the tooltip text.

* Fixed bug which meant that Labels were always aligned to the right and centre. Note that this changes the behaviour of default constructed Labels, which have always specified left alignment, but have been ignored till now.

* ListContainer now supports slices when setting children. For instance container[2:4] = [ list, of, children ]. ListContainer also now implements the index() method in the same way a list would, and allows access to the expand attribute of children using the new setExpand() and getExpand() methods.

* Improved WeakMethod behaviour when called after the instance has expired. Now a descriptive ReferenceError exception is thrown rather than the previous cryptic exception. Also added instance() and method() member functions to return the underlying member data.

* GafferUI.Menu now allows WeakMethods to be used for the command field of a menu item.

* Improved file selector for PathVectorParameters, and added custom file selector for FileSequenceVectorParameters.

* Fixed problem where the automatic Widget parenting mechanism was attempting to parent Menus unnecessarily.

0.32.1
------

* Added workaround for problems where string values were not always committed into parameters before the Execute button of the OpDialogue was clicked.

0.32.0
------

* Added GafferUI.NotificationMessageHandler, for displaying IECore messages in a little window.

* Added a ParameterHandler and ParameterValueWidget for DateTimeParameters.

* VectorDataWidget size behaviour now works much better for large amounts of data. It is now possible to use the browser's FileIndexedIO preview tab to view large amounts of data
from .cob and .fio files.

* Fixed bug in VectorDataWidget, whereby the vertical header would disappear when rows were deleted.

* Multiple fields may now be edited simultaneously in the VectorDataWidget, by selecting several fields before editing one of the selected fields. Changes are automatically copied to the rest of the selection. Columns may be selected by clicking on the horizontal header
and rows by clicking on the vertical header.

* The enter and return keys can now be used to edit the checkbox fields of a VectorDataWidget.

* The MultiLineTextWidget now has setEditable, getEditable, textChangedSignal, editingFinishedSignal and activatedSignal methods equivalent to the existing methods on TextWidget.

* Added a MultiLineStringPlugValueWidget class.

* StringParameterValueWidget now supports the ["UI"]["multiLine"] user data item.

* The browser app now has an "initialPath" parameter to allows the browsing location to be set from the command line.

* Added Gaffer.AttributeCachePath and GafferUI.AttributeCachePathPreview classes, to allow browsing of attribute caches.

* Browsing for paths from a PathPlugValueWidget where the path is presumed empty now starts from the current working directory.

0.31.0
------

* Fixed getText method of Label widget.

* TextInputDialogue now has all text in the textfield selected by default.

* Fixed "RuntimeError: underlying C/C++ object has been deleted" error triggered by removing a panel from a ScriptWindow.

* Fixed bug which meant that removing a panel would only keep a single subpanel of the panel that remained.

* Fixed bug which meant that sometimes the remaining layout buttons would cease to work after removing a panel from the CompoundEditor.

* PathListingWidget now has a displayModeChangedSignal() method.

* Added PathChooserWidget setPath() and getPath() methods.

* Added customisable modes to the BrowserEditor. Current modes allow the browsing of either files or ops.

* Added Gaffer.SequencePath class and used it to implement a file sequence browsing mode for the BrowserEditor and a FileSequenceParameterValueWidget.

* Added PathListingWidget setColumns() and getColumns() methods.

* Added a Gaffer.OpMatcher class, to provide lists of ops which are suitable for application to particular objects.

* Added a contextMenuSignal() to the Widget class.

* Added a right click menu to the BrowserEditor, allowing suitable ops to be applied to
files and file sequences.

0.30.0
------
* Fixed problem trying to call QLineEdit.setPlaceholderText within Nuke.

* Gaffer.BlockedConnection now supports reentrancy, with the connection only becoming unblocked when the outermost block has been exited.

* Fixed bug which prevented selection using the up/down cursor keys from working in the PathChooserWidget.

* ImageGadgets now have a linear to srgb conversion applied when they are drawn. This means they now match the Image widget behaviour.

* PathChooserWidget and PathChooserDialogue now accept a new allowMultipleSelection argument to the constructor. Use the new PathChooserDialogue.waitForPaths() method to wait for paths selected in this way.

* VectorDataWidget has a new protected _createRows() method which may be overridden by derived classes to customise the addition of new rows. The PathVectorDataWidget implements this by displaying a dialogue where the user may select multiple paths to be added. This improves the parameter ui for PathVectorParameters.

0.29.0
------

* The Gaffer.BlockedConnection constructor now accepts a list of connections to block, as an alternative to just a single connection.

* Added a Gaffer.LeafPathFilter class, which filters out leaf Paths.

* Fixed problem with Dialogue.waitForButton() which meant that the keyboard focus would be in the wrong place if a parent window was provided.

* PathListingWidget now supports user resizing of the columns. The existing automatic resizing behaviour remains, but any changes made by the user are remembered and applied as offsets to future automatic resize events.

* PathListingWidget.Column.lessThanFunction has been replaced with PathListingWidget.Column.sortFunction. The former was a function to compare two items, whereas the latter now simply returns the data in a form that should be passed to a standard less than comparison.

* Added PathListingWidget.selectionChangedSignal().

* Added PathListingWidget.scrollToPath() method.

* PathListingWidget now supports a tree view mode in addition to the existing list mode. This is exposed in the PathChooserWidget and PathChooserDialogue via a button to toggle between the modes.

* Deprecated PathListingWidget.selectedPaths() and introduced a pair of getSelectedPaths()/setSelectedPaths() methods.

* Added the ability to remove children from the TabbedContainer using del[start:end] notation.

* Added GafferUI.EventLoop.executeOnUIThread().

* Added Gaffer.DictPath, to allow browsing of dictionaries, IECore.CompoundData and IECore.CompoundObjects using the GafferUI Path components.

* Added GafferUI.BusyWidget, for saying "i might be some time but i don't really know how long so just twiddle your thumbs please".

* Fixed bug in GafferUI.Frame.removeChild.

* PathListingWidget now copes if a field in the Path.info() is missing.

* Added a Gaffer.IndexedIOPath class, to allow browsing inside Cortex files using the GafferUI Path components.

* GafferUI.EventLoop in Houdini mode now pumps 5 times rather than once per hou.ui.eventLoop idle. This makes typing in text fields interactive.

* GafferUI.TabbedContainer now has setTabsVisible() and getTabsVisible() methods.

* Added a frame() method to GafferUI.GadgetWidget, to frame a particular bounding box in the viewport, and fixed a bug whereby setGadget() didn't request a redraw.

* Added setPath and getPath methods to PathListingWidget, and PathWidget.

* Added setPathCollapsed and getPathCollapsed to PathListingWidget to allow programmatic control of the tree view.

* Added Gaffer.ClassLoaderPath class to allow browsing of ops and suchlike.

* GafferUI.SplitContainer.setSizes() can now be called before the SplitContainer has become visible.

* Added GafferUI.ErrorDialogue.ExceptionHandler class to simplify error handling.

* Added classes for previewing paths. General file information, headers, images, meshes, ops, and indexed io files and contents may all be previewed.

* Added a BrowserEditor class for embedding a file browser into a Gaffer layout.

* Added a browser app to browse the filesystem and display previews.

* Renamed ScriptNode::application() method to ScriptNode::applicationRoot() and changed return type to a raw pointer in keeping with the rest of Gaffer. Added python binding.

* Added ApplicationRoot::preferencesLocation() method to return an appropriate directory into which settings can be saved.

* Added Widget.visibilityChangedSignal().

* Fixed crash in python bindings for TypedObjectPlug::defaultValue, for the case of the default value being null.

* TypedObjectPlug bindings now support the serialisation of the value and default value, provided that the bindings for the types they hold implement __repr__ appropriately.

* Fixed bug in GafferBindings::Serialiser which meant that serialisers were called twice unecessarily.

0.28.1
------

* Changed the default resize mode of OpDialogue/ErrorDialogue to be manual

* Removed assert warning

* Fixed juddering resize events when opening the OpDialogue, by optimising out unecessary calls in Widget.setVisible().

0.28.0
------
* Added an InfoPathFilter, which allows filtering with an arbitrary match function applied to an arbitrary field of Path.info(). Used this to implement a filter text box for path choosers.

* PathParameterWidget now applies path filters, and has an _filter() method which can be overridden in derived classes to define the filter.

* GridContainer now supports the automatic parenting mechanism

* Window now support the addition of child windows using the automatic parenting mechanism.

* Keyword arguments can now be passed to the ContainerWidget.addChild() call generated by the automatic parenting mechanism. To properly support this, all Widget subclasses must take a **kw constructor argument, and pass it to their parent class constructor. An example use follows :

	with GafferUI.GridContainer() :
		# index is automatically passed to GridContainer.addChild() to specify the position of the button
		GafferUI.Button( "myButton", index = ( 0, 2 ) )

	with GafferUI.ListContainer() :
		# expand is automatically passed to ListContainer.addChild()
		GafferUI.Spacer( IECore.V2i( 10 ), expand=True )

* Added the ability to easily profile any gaffer application using the cPython profiling module, by specifying the -profileFileName command line flag. Use the pstats module to examine the resulting file.

* Optimised the Widget event filter.

* Fixed circular reference in GafferUI.CompoundParameterValueWidget which could cause "Underlying C/C++ object has been deleted" errors.

* The displayFunction in GafferUI.PathListingWidget.Columns may now return a GafferUI.Image or (as an optimisation) a QtGui.QIcon.

* Added GafferUI.PathListingWidget.defaultFileSystemIconColumn, which can be added to the list of columns passed to GafferUI.PathListingWidget to obtain an icon view.

* Optimised Widget implementation so that the event filter is only applied when it is absolutely needed - either when a connection to one of the signals has been made or when getToolTip has been overridden. Investigations with the standard gaffer ui revealed that only about one third of widgets meet these criteria.

* Optimised Widget implementation by lazily constructing signals when they are first accessed. This improves construction times but also reduces the memory footprint of a freshly constructed Widget by 40%.

* Added Gaffer.lazyImport function, which imports modules in such a way that they aren't actually loaded until first accessed.

* Optimised startup of gaffer applications which don't use any GL functionality, by using the new Gaffer.lazyImport functionality for PyOpenGL, IECoreGL and QtOpenGL.

* Added buttonDoubleClickSignal() to GafferUI.Widget and GafferUI.Gadget.

* Added setSelection() and getSelection() methods to GafferUI.TextWidget, along with a selectionChangedSignal() method. An additional selectingFinishedSignal() uses heuristics to determine when the user has finished making a selection. This is useful in Widgets which wish to provide easy methods of acting on the selection.

* The Menu.popup() method now takes optional position and forcePosition arguments.

* Improved PathWidget popup listing behaviour.

* GafferUI.ScrolledContainer now always asks for enough size to completely show its contents, regardless of the scroll mode in use.

* Deprecated GafferUI.Window setResizeable() and getResizeable() methods in favour of new setSizeMode() and getSizeMode() methods. These provide three modes - Manual (the same as the previous resizeable), Fixed (the same as the previous non-resizeable) and Automatic, whereby the window always tries to fit its child. Added a resizeToFitChild() method for cases where sizeMode is not Automatic and you know the child has been resized.

* The OpDialogue now resizes automatically to fit the parameters initially, and adjust as parameter sections are shown and hidden.

* The Widget class now has a keyReleaseSignal, and the GadgetWidget propagates events on this signal to the existing Gadget::keyReleaseSignal.

* Added support for "label" attributes in menu definitions to GafferUI.Menu. This is really just a workaround for the fact that IECore.MenuDefinition uses / characters to delineate between menu entries, and sometimes we want a / in the entry name itself.

* The VectorDataWidget now sizes itself to fit its contents.

0.27.0
------

* Keeping the same font dpi no matter where gaffer is running.

* Fixed bug which caused NameError to be thrown when loading a script containing an OpHolder.

* NodeUI widgets can now be customised on a per-plug basis using the NodeUI.registerPlugValueWidget call.

* Fixed bug which could cause crashes if a plug managed by VectorTypedParameterHandler had a null value.

* Fixed bug which caused additional parameters1, parameters2 etc plugs to be created on the ReadNode. Added an additional test to check that the ReadNode works following serialisation.

* Implemented keys(), values(), items() and __getitem__( long ) for GraphComponent bindings.

* Added a simple Write node.

* Added an execute application which can be used to execute Write nodes, or any other node with an execute() method.

* The Gaffer headers are now installed in the include directory in the Gaffer distribution.

* The Cortex procedural stubs are now installed as part of the Gaffer distribution.

* GafferUI.TabbedContainer now has an index() method for retrieving the index of a given child, and a currentChangedSignal() method for signalling when the current tab has been changed.

* GafferUI.NodeSetEditor now has a nodeSetChangedSignal() method, to notify listeners when the node set the editor is using has changed.

* GafferUI.CompoundEditor now houses a couple of useful buttons alongside the tabs in the layout. One brings up the menu to edit the layout, and the other locks the currently viewed nodes for the current editor.

* Added Serialisable flag to Gaffer.Plug, to control whether or not plugs and their values are serialised.

* The gui app now has a fullScreen command line flag.

* NodeEditor now displays the node type.

* The Plug base class may now be serialised.

* Fixed bug which meant that plug flags were not correctly serialised.

* Fixed bug in the automatic Widget parenting mechanism, which meant Widgets could be parented inappropriately when being created from the constructor of another Widget.

* The Path.addFilter() and Path.removeFilter() methods have been deprecated and replaced with Path.setFilter() and Path.getFilter() methods. Use the new CompoundFilter class if you wish to use more than one filter.

* The Path and FileSystemPath constructors now accept an optional filter argument.

* The PathFilter class now has setEnabled() and getEnabled() methods to turn the filter on and off. Derived classes should now implement the _filter() method rather than the filter() method.

* The PathFilter class now has a changedSignal(), which issues notifications when the filter is changed in some way. The Path class uses this to correctly trigger its own pathChangedSignal()

* The PathFilter classes now accept a dictionary userData argument to the constructor, which can be used for storing arbitrary data with the filter.

* The CheckBox class now has setText() and getText() accessors.

* Added PathFilterWidget class to allow uis to be built for the filters on paths. Added filter ui to PathChooserWidget, along with a button to refresh the listing. 

* The Path class now adds "name" and "fullName" entries to the info() dictionary.

* The Menu class now accepts booleans as well as callables for the checkBox MenuItemDefinition entry.

0.26.0
------

* Gaffer.Application._executeStartupFiles() now takes an optional contextDict to allow variables to be passed to the startup scripts.

* GafferBindings.Serialiser now has a public constructor and can be used directly. It still needs some refactoring.

* Gaffer.ApplicationRoot now has a preferences() method which returns a node used to represent preferences. It also has a savePreferences() method to save the user preferences into a startup script. The GafferUI.ApplicationMenu
provides access to this via a menu item.

* Default stylesheet now does a better job of aligning the corner widget for the TabbedContainer.

0.25.0
------

* Changed in NumericPlugValueWidget the methods __keypress and __textChanged to be protected

* Added alternate color as new entry in widget style sheet

* The GafferUI.Image class now uses a more sensible cache size to eliminate thrashing when loading images from disk. The cache size defaults to 100 MB but can be specified directly using the GAFFERUI_IMAGECACHE_MEMORY environment variable, which is also interpreted as being a number in MB.

0.24.0
------

* ParameterisedHolder now correctly loads an instance of the held class
following serialisation.

* ParameterisedHolder::setParameterised() and OpHolder::setOp() now accept
an optional keepExistingValues parameter which defaults to false. Passing
true preserves existing plug values in preference to the values in the
incoming Parameterised object.

* TabbedContainer now allows the addition of a custom Widget to the top
right corner using the setCornerWidget() and getCornerWidget() methods.

* Fixed a bug which meant that the ButtonEvent::line field was incorrectly
transformed when delivering events to Gadgets.

* Fixed tab sizing issue on OS X.

* Fixed crashes in ObjectParameterHandler triggered by plugs with null values.

* Added enterSignal(), leaveSignal(), dragEnterSignal() and dragLeaveSignal() methods to Gadget. Nodules now highlight themselves when entered using this
new functionality.

* Fixed GafferUI to work with qt 4.6 as well as 4.7.

* Gaffer can now be run embedded in Nuke.

0.23.0
------

* Fixed a bug which prevented keypresses in GadgetWidget from being propagated to the parent widget if they were not processed by the GadgetWidget.

* Can now exit full screen mode by hitting Escape.

* OpDialogue.waitForResult() now never returns Exceptions if execution fails. Instead it gives the user the chance to try again or cancel.

* CompoundParameterValueWidget and CompoundVectorParameterValueWidget now support the ["UI"]["collapsible"] and ["UI"]["collapsed"] parameter userData. The collapsible argument to the constructor now defaults to None, it can be specified explicitly as True or False to override the userData request.

* Fixed a bug which prevented the GafferUI.Widget owner for empty QTabWidgets from being found with PyQt4. This caused errors during event handling.

* The Widget.setVisible() and Widget.getVisible() methods have been modified to match the behaviour of Widget.setEnabled() and Widget.getEnabled(), and an addition Widget.visible() method has been introduced to query visibility relative to an ancestor. See documentation for further details.

* Added SplitContainer getSizes(), setSizes() and handle() methods. See documentation for details.

* ListContainer.__init__() orientation parameter now defaults to vertical.

* CompoundEditor now provides dynamic behaviour for expanding and collapsing child editors. Hit space to expand the current editor one level, double space for two levels and so on. Space then collapses back one level, double space two levels and so on. When an editor is fully collapsed, hovering over the splitter handle will dynamically show it.

0.22.1
------

* Changed events keyPress and textChanged to be protected

0.22.0
------

* Collapsible Widget now supports corner widget expanded

* Changed Error Window to be resizable as default

* Added selectedSignal in SelectionMenu

* Added CurrentIndexChangedSignal test in SelectionMenuTest

* Fixed StringParameterValueWidget to create a PlugValueWidget using the registered Type

* Added enterSignal and leaveSignal in Widget


0.21.0
------

* Added a selectionMenu widget.

* Stylesheet restructured, enabling style overrides in widgets.

* Improved stylesheet performance applying styles only in Window and Menu widgets.

* Buttons can optionally have the frame removed using the setHasFrame() method or the hasFrame argument to the constructor. Additionally they no longer have minimum sizes defined by the stylesheet.

* Minor style changes.

* Disabled Qt's automatic merging of menubars with the OS X system menu. This was causing crashes and wasn't compatible with fullscreen mode either.

* Added a simple ProgressBar widget.

* Removing a node from a parent using removeChild() now automatically disconnects the node from the graph. Fixes issue #38.

* Fixed a number of test failures which occurred only in the Image Engine build, due to the fact that we install the cortex ops with different version numbers than a standard install.

* CompoundParameterValueWidget now updates the ui appropriately when plugs are added and removed. This can be seen in the Read node when switching between different file types.

* File menu items now open file browsers in a more sensible location.

* File browser now has a button to go up one directory level.

* Containers may now be used in the python with statement to make the creation of nested layouts more straightforward. For example :

	with GafferUI.Collapsible() :	
		with GafferUI.ScrolledContainer() :
			with GafferUI.ListContainer( GafferUI.ListContainer.Orientation.Vertical ) :
				GafferUI.TextWidget( "Making uis is easier now" )
				GafferUI.Button()

* Nodule::registerNodule now accepts regular expressions for plug names.

* StandardNodeGadget::acceptsNodule is deprecated. Use Nodule::registerNodule in preference. Default implementation of StandardNodeGadget::acceptsNodule now always returns true.

* Graph editor ui for ParameterisedHolders now only shows connections for ObjectPlugs, this prevents the interface being cluttered with connections for all the other parameter types.

* Viewer is no longer hardcoded to display the result of the "output" plug - it now displays the result of the first output ObjectPlug. This allows it to view the results of procedurals and ops.

* The node creation menus for Ops and Procedurals now create OpHolder and ProceduralHolder nodes rather than generic ParameterisedHolder nodes. Ops and procedurals may now be run in Gaffer.
			
0.20.0
------

* GafferUI.EventLoop supports Houdini using hou.ui.addEventLoopCallback

* Support for boost 1.37.0

* Using future to import with_statement for python 2.5 compatibility

0.19.0
------

* Added a BoolVectorDataPlug and a BoolVectorDataParameterHandler.

* GafferUI._Variant.fromVariant() now supports booleans.

* VectorDataWidget now accepts a list of VectorData objects to the constructor and in setData(). This allows larger tables to be constructed consisting of columns from several VectorData objects. As a result VectorData.getData() always returns a list of objects, even when operating on only a single object. VectorDataWidget now accepts custom header labels specified by passing a list of strings to the header parameter in the constructor.

* Using an officially allocated TypeId range, and not one that might conflict with internal projects.

* CompoundValueParameterWidget can now be usefully subclassed, and the _buildChildParameterUIs method reimplemented to change behaviour.

* Added a CompoundVectorParameterValueWidget.

* Fixed a bug in GafferUI.Menu which prevented dynamically generated submenus from displaying correctly.

* Plugs representing parameters are now correctly identified as being dynamic, and can therefore be saved and loaded to scripts. Custom ParameterHandler classes should now call setupPlugFlags() in their setupPlug() implementation to support this behaviour.

* Added OpHolder and ProceduralHolder node types. The ui still needs work to make these useable.

* Fixed problem which caused artifacts in GafferUI.Images when using PySide.

* Reduced default font size to fit more on screen.

* Fixed problem with GafferUI.Button positioning on OS X.

0.18.0
------

* Renamed ArrayNodule to CompoundNodule.

* Bug fix for PathListingWidget with allowMultipleSelection==True. When selecting more than one item, the path being edited is now always set the current directory. This avoids problems where setting the path to the last selected leaf could cause the current selection to be destroyed.

0.17.0
------

* Fixed a bug in NumericPlug::setValue() which meant it was possible to set value outside the Plug's min/max range.

* Changed ParameterHandler interface to allow the same ParameterHandler instance to be used repeatedly even when Parameters are being added and remove or are changing type. This should be more efficient but more importantly will be necessary to allow the CompoundParameterValueWidget to adjust the ui when Parameters are edited in this way. The following changes need to be made to a ParameterHandler implementation :

	* Remove the plugParent argument to the constructor, and move the plug creation code to an implementation of the new setupPlug() pure virtual function.
	* Stop passing the parameter to the base class constructor, but instead store it as a member variable, and implement the pure virtual parameter() method to return it.

See python/GafferTest/ParameterHandlerTest.py for an example.

* The path argument to the PathPlugValueWidget is now optional, with a FileSystemPath being used if no path is specified.

* ValuePlug now emits plugSetSignal() before calling Node::dirty(), rather than vice versa.

* The ReadNode now exposes the parameters of the IECore::Readers it uses as plugs on the node.

* The PathListingWidget contents can now be customised by passing a column specification to the constructor. See PathListingWidget.defaultFileSystemColumns for an example. Also added support for sorting the listing by clicking on the headers, and allowed the column specification to provide a sorting function to be used in this case.

* The PathListingWidget now allows multiple selection of files using the allowMultipleSelection argument to the constructor, and provides a list of the currently selected paths using the selectedPaths() method.

* Implemented the ParameterisedHolder::setParameterised( className, classVersion, searchPathEnvVar ) overload. Still needs some work so nodes can be serialised to a script and reloaded properly.

* Fixed a bug in the Node bindings which meant that the C++ base class implementations weren't called when a python class didn't provide overrides.

* ParameterHandler::setupPlug now takes an argument specifying the plug direction required.

* Added an ObjectParameterHandler.

* Added Widget setEnabled(), getEnabled() and enabled( relativeTo ) methods - see documentation for details. Signals are not emitted for Widgets which have been disabled.

* Fixed a bug in the RunTimeTyped registration for TypedPlug.

0.16.0
------

* Added a StandardNodeGadget::acceptsNodule() method which may be reimplemented by derived classes to control exactly which plugs are represented by the gadget. See GafferUITest.StandardNodeGadgetTest.testSubclassing() for an example.

* GafferUI.StringPlugValueWidget now exposes the internal TextWidget with a textWidget() method.

* GafferUI.TextWidget now supports password style text display, settable with the displayMode constructor parameter, or the setDisplayMode() method.

* New StringParameterValueWidget supports ["UI"]["password"] parameter userData.

* The appearance of disabled buttons is now less confusing.

0.15.1
------

* Fixed layout problems caused by adding larger items into existing rows of a GridLayout.

0.15.0
------

* Added a GridContainer class.

* Fixed bug which meant that connections were temporarily offset from their endpoint if a nodule was added to a node immediately after them being made (as the Group node does).

* Fixed bugs in the GroupNode which meant that compute() was called each time the node was moved in the GraphEditor, and that compute() could error if an input plug contained None.

* Gaffer can now be run embedded in maya versions which use Qt natively.

0.14.0
------

* The parameter userData ["UI"]["visible"] is now supported.

* Fixed failing test GafferTest.ParameterisedHolderTest.testAddAndRemoveParameters. Parameters may now be added or removed within a ParameterisedHolder::ParameterModificationContext.

* Fixed a few stylesheet issues that appeared when running under Gnome.

* Added a GraphComponent::setChild() method - this operates in the same way as the __setitem__ python method. See documentation for the distinction between addChild() and setChild().

* Fixed a bug whereby GraphComponent::getChild( "" ) would return the GraphComponent itself rather than nothing.

* Fixed a bug dealing with parameters changing type within a ParameterisedHolder::ParameterModificationContext.

* GraphComponent::parentChangedSignal() now also provides the previous parent to connected slots in addition to the child argument.

* Fixed a bug where transferring a child from one parent to another would emit parentChangedSignal() twice, once with the child unparented from the old parent, and once with the child reparented to the new parent. Now the signal is only emitted once, omitting the bogus temporary unparenting signal.

* Plugs now automatically disconnect their inputs and outputs when they are removed from their parent.

* Plugs may no longer implement acceptsInput( 0 ) to return false - this was illogical as it prevents the undoing of a connection made by the user.

0.13.0
------

* Fixed a bug whereby a node would be offset from the mouse position when dragging if starting the drag was delayed while other uis (particularly the NodeEditor) were updating.

* Fixed a bug which meant that connections were not correctly represented in the GraphEditor for children of the ArrayNodule.

* The ParameterHandler classes now correctly define the Ptr and ConstPtr member typedefs required for all IECore::RefCounted subclasses.

* The ParameterHandler classes now have a plug() method which returns the plug which was created to represent the parameter().

* The ParameterisedHolder class now exposes the internal ParameterHandler with a parameterHandler() method.

* The CompoundParameterHandler class now provides access to the handlers it uses for child parameters using the childParameterHandler() method.

* The CompoundParameterHandler now has python bindings.

* The Image widget no longer expands to fill space if it is available.

* The Label widget now has setText() and getText() methods.

* The PathWidget class now has a path() method returning the path being displayed.

* The Window.addChildWindow( window ) call now results in the parent window holding a reference to the python object representing the child. This avoids situations whereby the child python object would die but the QWidget representing the child on the C++ side would continue to live. Use Window.removeChild() to remove a child window when you wish to destroy it, or use setVisible( False ) to hide the child until you need it again.

* Fixed bug in PathWidget which meant that the path display would be incorrect until the path changed for the first time.

* PathListingWidget fixes :

	* Error when double clicking an item.
	* Selection was not being cleared when the current path wasn't valid.
	* Path wasn't being set when a leaf item was selected, which meant that hitting Enter in the PathChooserDialogue chose the wrong path.
	* Double clicking a directory when the current path wasn't valid created another invalid path, rather than replacing the invalid section.	

* Added a "python" application which simply executes a python file in the Gaffer environment.

* Added a GafferUI._Variant class which has helper function for dealing with differences in PySide and PyQt4 with respect to QVariant handling.

* Fixed VectorDataWidget to work with PySide.

* Added a BoxParameterHandler covering Box2i, Box2f, Box3i and Box3f parameter types.

* GraphComponent now supports the len() function in python, returning the number of children for the instance. The __nonzero__ method is also implemented so that queries of the type "if graphComponent : " will return True as before, even if there are no children.

* The sizing behaviour of the PathListingWidget is no longer quite as annoying.

* GafferUI.Menu now optionally passes a "menu" argument to the checkBox callback of a menu item, in the same way as it does for the command callback.

* Fixed bug in GafferUI.ColorSwatch.getColor().

* Added Window.[gs]etFullScreen() methods, and added a menu item to the Layout menu to use them. Added a parentWindow argument to the Dialogue*.waitFor*() methods, and used it appropriately to keep dialogues on top even when in full screen mode.

* The Image class now uses the Cortex PNGImageReader for loading png files, and correctly converts linear data to sRGB for display.

* Added a basic framework for parameter-specific uis. Initially there are only specific uis for compound parameters, presets only parameters and path parameters - all others fall back to using the default plug widgets. A UI may be easily instantiated for all the parameters of a ParameterisedHolderNode using the GafferUI.CompoundParameterValueWidget - see GafferUI.ParameterisedHolderNodeUI for an example.

* The MultiLineTextWidget now has much more sensible tab spacing.

* The Collapsible container can now display an optional widget in the top right corner of the header. Use the setCornerWidget() and getCornerWidget() methods to manipulate this widget.

* Removed font parameter from GafferUI.Label - it wasn't doing anything anyway. Font control will likely return in the form of some support for text markup.

* Fixed variable scope issues which meant that the following code would fail if executed in a script editor :

		class A() :

			def __init__( self ) :

				print A

		a = A()

0.12.0
------

* Added a VectorDataWidget and a VectorDataPlugValueWidget, handling plugs of type StringVectorPlug, IntVectorPlug, FloatVectorPlug and V3fVectorPlug. Still needs file selector support.

* Added a V3fVectorDataPlug and a V3fVectorDataParameter handler.

* All gaffer applications now include a call to IECore.registerRunTimeTyped.

* Fixed bug which would cause the base class doRender() method to be called in addition to the overridden one when subclassing from Gadget in python.

* Plug::setInput() now calls acceptsInput() even when the new input is null. This allows plugs to reject the removal of existing connections. The connection gadget has been updated to respect the new rejection possibility, preventing the dragging of the destination end of a connection to a plug whose acceptsInput( 0 ) returns false, and not attempting to set the input if the source end of source a connection is dragged off into space. Currently no Gaffer plug type returns false from acceptsInput( 0 ), but custom plugs are free to do so and Gaffer plugs may return false in the future based on the content of a ReadOnly or Locked flag on the plug.

* Window constructor now accepts an additional "child" keyword argument which is passed to a call to setChild().

* Fixed problem whereby the hover colour for the SplitContainer handles wouldn't work on all platforms.

* The GraphEditor now provides access to its internal GraphGadget with the graphGadget() method.

* Refactored the Set class into an abstract base class and a StandardSet class containing the previous functionality. The members() and sequencedMembers() methods have been removed as they didn't generalise well to other potential Set subclasses (such as a NameFilteredSet). Instead a new member( i ) method provides ordered access and the contains( member ) method provides membership queries.

* Added a ChildSet class whose membership tracks the children of a given GraphComponent.

* Added python bindings for Nodule::plug and Connection::srcNodule() and Connection::dstNodule().

* Added CompoundEditor.editors() method, which returns all the child editors, optionally filtered by type.

* GraphGadget can now show arbitrary Sets of nodes, specified using the GraphGadget::setGraphSet() method.

* GafferBindings::SignalBinder now supports signals of arity 0.

* GafferBindings::SignalBinder now returns the class that was bound, so that additional method bindings may be added by calling code.

* A generic set of python signals are now bound as Signal0, Signal1, Signal2 and Signal3, where the number denotes the number of arguments the Signal takes. Python callables may be used to provide custom result combiners - see GafferTest.SignalsTest for examples.

* The GraphEditor now allows custom right click menus to be displayed for nodes in the graph. See GraphEditor.nodeContextMenuSignal() for brief documentation.

0.11.0
------

* GafferUI.Image() constructor now accepts unicode strings.

* Gadget, NodeGadget and StandardNodeGadget may now be derived from in Python.

* NodeGadget.registerNodeGadget() may now be called from Python, passing a callable for the creation function.

* New GafferUI.ImageGadget class allows images to be displayed in zoomable gadget uis.

* GafferUI.StandardNodeGadget can now be customised using a new setContents() method. This allows the central region of the node to be replaced with custom gadgets on a per-node basis. See startup/gui/graphs.py for example code for customising with an icon (note that this is waiting for a PNGImageReader to be available in cortex).

0.10.0
------

* Fixed flickering in the Viewer - enabled double buffering in same way as GraphEditor.

* The view application has been ported from gtk to Qt.

* The Collapsible widget no longer changes width when its collapse state is changed.

* Window.addChildWindow() has been ported from gtk to Qt. This means that dialogues can be made to stay on top of the windows that launch them.

* GafferUI.Dialogue.__init__ now accepts borderWidth and resizeable arguments.

* Collapsible constructor now accepts borderWidth argument.

* MultiLineTextWidget now accepts text argument to constructor.

* OpDialogue now reliably closes itself following execution or cancel. A future version may stay open if userData on the Op requests it.

* All signal connections are now made to Gaffer.WeakMethod objects where appropriate. Updated the Widget documentation to encourage the use of WeakMethod.

* GafferUI.Frame class now accepts a child argument to the constructor, actually uses the borderWidth argument, and Frame.setChild( None ) no longer errors.

* Rationalised Window close behaviour. Added Window.close() method which may be called to request that a window be closed - this is also called when the user clicks the close icon. Window subclasses may override Window._acceptsClose to reject or defer closing. Window.closeSignal() has been renamed to Window.closedSignal() and now is now used purely for notification when a window has closed (the return value from attached slots is irrelevant).

* GafferUI.Frame has a borderStyle argument, defaulting to drawing a rather plain border.

* OpDialogue now reports errors using a new ErrorDialogue class.

* GafferUI.CamelCase has been removed as it was ported into IECore some time ago.

* Fixed bug which prevented GraphComponent::commonAncestor<T>() from compiling.

* Gadgets and Widgets may now have tooltips. Client code can set the tooltip using setToolTip(), and classes may provide default dynamic values by implementing getToolTip() appropriately. Currently the NodeGadget, Nodule and ConnectionGadget implement getToolTip to return information about the Nodes, Plugs and Connections they represent.

* Widgets now have a wheelSignal() for responding to mouse wheel events. The Viewer and GraphEditor use this to implement zooming.

* Fixed bug which prevented Collapsible containers from toggling state correctly when multiple instances shared a parent.

* Node UIs now use a ScrolledContainer for their top level container.

* Label widget now allows the alignment to be specified.

* Fixed alignment issues in NodeUIs.

* OpDialogue has a better default size.

* Added handlers for the following parameter types :

	IECore.V2iParameter
	IECore.V3iParameter
	IECore.V2fParameter
	IECore.V3fParameter
	IECore.Color3fParameter
	IECore.Color4fParameter
	
* Fixed TypeError: invalid argument to sipBadCatcherResult() messages coming from ColorSwatch widget.

0.9.0
-----

* Can now access the internal QPixmap for a GafferUI.Image widget using the _qtPixmap() method. This is to assist in implementing other widget types and should be considered off limits for user code (along with all the other protected _qt* function).

* GafferUI.Button can now display an optional GafferUI.Image in addition to text, and has setText(), getText(), setImage() and getImage() accessors. Note that the label keyword parameter has been renamed to text. The GafferUI.Dialogue._addButton() method now accepts a Button directly (as well as still accepting a string for backwards compatibility) to allow buttons with images to be used in Dialogues.

* GraphEditor flicker should now be fixed (enabled double buffering for GL display).

* Fixed bug which would cause Ops to be executed twice in OpDialogue.waitForResult().

0.8.0
-----

* GafferUI.Image now falls back to using Qt image loading code if no IECore.Reader is available. This provides support for PNG images among others. Also fixed some bugs whereby images would fail to load if a full path wasn't provided - now the GAFFERUI_IMAGE_PATHS are used appropriately.

* OpDialogue can now be used non-modally without waitForResult(). The new OpDialogue.opExecutedSignal() can be used to tell when the op has been executed, and to get the result.

* GafferUI.EventLoop addIdleCallback() and removeIdleCallback() have been ported from the old gtk code to the new Qt code.

* Reworked GafferUI.EventLoop to support embedding of Gaffer in Maya. See documentation in GafferUI/EventLoop.py and apps/gui/gui-1.py for details.

0.7.0
-----

* Can now derive from ScriptNode in python and override acceptsChild etc as expected.

* ScrolledContainer and viewer classes have now been ported to the Qt based GafferUI.

* Added a GafferUI.Image class for displaying images in a widget.

* GafferUI.Menu class now supports checkBox menu items again.

* GafferUI.CheckBox widget now displayed with a tick rather than a blank yellow box.

* CompoundNumericPlugValueWidget has now been ported to the Qt based GafferUI, providing uis for V2f, V3f, V2i and V3i plug types.

* GafferUI.Widget derived classes may now pass a GafferUI.Widget instead of a QtGui.QWidget instance to the base class constructor. This makes it possible to develop a wider variety of custom widgets without resorting to Qt APIs.

0.6.0
-----

* Can now specify whether to use PySide or PyQt for Qt python bindings, using the GAFFERUI_QT_BINDINGS environment variable.

0.5.0
-----

* Added a new OpDialogue class to make it easy to run ops.

* Added a new op application, to allow users to run ops in a gui.

* NodeEditor.registerNodeUI has been moved to NodeUI.registerNodeUI, and a NodeUI.create factory functiona added. This allows NodeUIs to be used in places other than the NodeEditor. 

0.4.0
-----

* Can now derive from GraphComponent in python and override acceptsParent and acceptsChild methods. These methods can also be overridden in other python-derivable classes such as Plug and Node.

* Can now derive from CompoundPlug in python.

0.3.0
-----

* ParameterisedHolders now allow some Parameters to opt out of representation as a Plug by adding a "noHostMapping" user data item with a value of BoolData( True ).

* Can now implement and use ParameterHandlers in python.

* Ctrl-C now correctly kills Gaffer

* Fixed type registration for TypedObjectPlugs.

* Fixed NodeEditor lag when selecting several nodes in the GraphEditor.

* Added a factory mechanism for Nodules, allowing different nodules to be used for different plugs. Used this to implement an ArrayNodule type which allows connections to the children of a CompoundPlug to be managed. The code below can be used to demonstrate this :

	import GafferUI
	GafferUI.Nodule.registerNodule( Gaffer.Node.staticTypeId(), "c", GafferUI.ArrayNodule )

	n = Gaffer.Node()

	n.addChild( Gaffer.CompoundPlug( "c" ) )
	n["c"].addChild( Gaffer.IntPlug( "a" ) )
	n["c"].addChild( Gaffer.IntPlug( "b" ) )
	n["c"].addChild( Gaffer.IntPlug( "c" ) )

	addChild( n )

	n2 = Gaffer.Node()
	n2.addChild( Gaffer.IntPlug( "o", Gaffer.Plug.Direction.Out ) )

	addChild( n2 )

* Fixed bug which caused "RuntimeError: Internal C++ object (PySide.QtGui.QLineEdit) already deleted." messages to be displayed.
