name: CI

on:
  workflow_dispatch:
    branches:
      - '*'
  push:
    branches:
      - master
      - '*_maintenance'
      - '*gafferCortex*'
  pull_request:
    branches:
      - master
      - '*_maintenance'
      - '*gafferCortex*'
  release:
      types: [published]

jobs:

  build:

    strategy:

      # Don't cancel other jobs in the build matrix if one job fails.
      fail-fast: false

      matrix:

        # Rather than generate all permutations of various settings,
        # we want to explicitly list each of the variants we want to
        # test. We can use `name` to declare the names of our variants,
        # and then use `include` to define their settings.

        name: [
          # linux,
          # linux-debug,
          # linux-python3,
          # macos,
          windows-python3,
        ]

        include:

         # - name: linux
         #   os: ubuntu-16.04
         #   buildType: RELEASE
         #   variant: linux-python2
         #   publish: true
         #   containerImage: gafferhq/build:1.2.0
         #   dependenciesURL: https://github.com/GafferHQ/dependencies/releases/download/2.3.0/gafferDependencies-2.3.0-Python2-linux.tar.gz
         #    # GitHub container builds run as root. This causes failures for tests that
         #    # assert that filesystem permissions are respected, because root doesn't
         #    # respect permissions. So we run the final test suite as a dedicated
         #    # test user rather than as root.
         #   testRunner: su testUser -c
         #   sconsCacheMegabytes: 400
         #   packageExtension: .tar.gz
         #
         # - name: linux-debug
         #   os: ubuntu-16.04
         #   buildType: DEBUG
         #   variant: linux-python2
         #   publish: false
         #   containerImage: gafferhq/build:1.2.0
         #   dependenciesURL: https://github.com/GafferHQ/dependencies/releases/download/2.3.0/gafferDependencies-2.3.0-Python2-linux.tar.gz
         #   testRunner: su testUser -c
         #    # Debug builds are ludicrously big, so we must use a larger cache
         #    # limit. In practice this compresses down to 4-500Mb.
         #   sconsCacheMegabytes: 2500
         #   packageExtension: .tar.gz
         #
         # - name: linux-python3
         #   os: ubuntu-16.04
         #   buildType: RELEASE
         #   variant: linux-python3
         #   publish: true
         #   containerImage: gafferhq/build:1.2.0
         #   dependenciesURL: https://github.com/GafferHQ/dependencies/releases/download/2.3.0/gafferDependencies-2.3.0-Python3-linux.tar.gz
         #   testRunner: su testUser -c
         #   sconsCacheMegabytes: 400
         #   packageExtension: .tar.gz
         #
         # - name: macos
         #   os: macos-10.15
         #   buildType: RELEASE
         #   variant: macos-python2
         #   publish: true
         #   containerImage:
         #   dependenciesURL: https://github.com/GafferHQ/dependencies/releases/download/2.3.0/gafferDependencies-2.3.0-Python2-osx.tar.gz
         #   testRunner: bash -c
         #   sconsCacheMegabytes: 400
         #   packageExtension: .tar.gz

         - name: windows-python3
           os: windows-2016
           buildType: RELEASE
           variant: windows-python3
           python-version: '3.x'
           publish: true
           containerImage:
           dependenciesURL: https://github.com/hypothetical-inc/gafferDependencies/releases/download/3.0.0a1/gafferDependencies-3.0.0a1-Python3-windows.zip
           appleseedURL: https://github.com/appleseedhq/appleseed/releases/download/2.0.0-beta/appleseed-2.0.0-beta-0-g5cff7b96b-win64-vs140.zip
           inkscapeURL: https://inkscape.org/gallery/item/24644/inkscape-1.0.2-2-x64.7z
           testRunner: cmd
           sconsCacheMegabytes: 400
           packageExtension: .tar.gz

    runs-on: ${{ matrix.os }}

    container: ${{ matrix.containerImage }}

    env:
      DISPLAY: ":99.0"
      ARNOLD_LICENSE_ORDER: none # Don't waste time looking for a license that doesn't exist
      GAFFER_BUILD_DIR: "./build"
      GAFFER_CACHE_DIR: "./sconsCache"

    steps:

    - uses: actions/checkout@v2
    - uses: ilammy/msvc-dev-cmd@v1 # for windows - does nothing on Linux/osx
    - uses: SimenB/github-actions-cpu-cores@v1

    - name: Set up Python (Windows)
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
      if: runner.os == 'Windows'

    - name: Install toolchain (MacOS)
      # Prefer `pip install` where possible because it is faster
      # than `brew install`.
      run: |
        pip install scons==3.1.2
        # Ensure scons is on PATH, at some point it vanished, maybe as part of GH Py 2-3 migration?
        echo `pip show scons | grep "Location:" | cut -d ' ' -f2`/../../../bin >> $GITHUB_PATH
        pip install sphinx==1.8.1 sphinx_rtd_theme==0.4.3 recommonmark==0.5.0 docutils==0.12
        # Force inkscape < 1.0 until SConstruct is updated
        brew install --cask xquartz &&
        brew install --cask ./config/brew/Casks/inkscape.rb
      if: runner.os == 'macOS'

    - name: Install toolchain (Linux)
      run: |
        echo /opt/rh/devtoolset-6/root/bin >> $GITHUB_PATH
        Xvfb :99 -screen 0 1280x1024x24 &
        metacity&
        useradd -m testUser
      if: runner.os == 'Linux'

    - name: Install toolchain (Windows)
      shell: bash
      run: |
        python --version
        pip install SCons
        pip install sphinx
        pip install pywin32
        scons --version
        curl -L -O  ${{ matrix.inkscapeURL }}
        7z x -y inkscape-1.0.2-2-x64.7z
        # add inkscape env var
        echo INKSCAPE=inkscape.exe >> $GITHUB_ENV
        # add inkscape to sconsOptions
        echo "INKSCAPE='inkscape.exe'" | tee -a .github/workflows/main/sconsOptions
        echo "os.environ['PATH']='$(cygpath -m $GITHUB_WORKSPACE)/inkscape/bin/'+os.path.pathsep+os.environ['PATH']" | tee -a .github/workflows/main/sconsOptions
        # we remove /usr/bin/link so it doesn't interfere with MSVC link
        rm /usr/bin/link
      if: runner.os == 'Windows'

    - name: 'Install Python Modules'
      shell: bash
      run: |
        python --version
        pip install PyJWT==1.7.1 PyGitHub==1.45

    - name: Set Custom Variables
      shell: bash
      run: |
        .github/workflows/main/setBuildVars.py
        echo GAFFER_SPHINX=`which sphinx-build` >> $GITHUB_ENV
      env:
       GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       GAFFER_BUILD_VARIANT: ${{ matrix.variant }}

    - name: Disable macOS PR Docs
      run: |
        echo GAFFER_SPHINX=doesNotExist >> $GITHUB_ENV
        echo GAFFER_VALIDATE_EXTRA_FLAGS=--skipDocs >> $GITHUB_ENV
      if: runner.os == 'macOS' && env.GAFFER_GITHUB_RELEASEID == ''

    - name: tmate
      uses: mxschmitt/action-tmate@v3

    - name: Install dependencies (MacOS and Linux)
      # The `$GITHUB_ENV` shenanigans creates an environment variable
      # containing the hash of the archive, for use in the cache key
      # below.
      shell: bash
      run: |
        echo GAFFER_DEPENDENCIES_HASH=`python .github/workflows/main/installDependencies.py --archiveURL ${{ matrix.dependenciesURL }} --dependenciesDir ${{ env.GAFFER_BUILD_DIR }} --outputFormat "{archiveDigest}"` >> $GITHUB_ENV
        ./config/installArnold.sh
        ./config/installDelight.sh
        echo ARNOLD_ROOT=$GITHUB_WORKSPACE/arnoldRoot >> $GITHUB_ENV
        echo DELIGHT=$GITHUB_WORKSPACE/3delight >> $GITHUB_ENV
      if: runner.os != 'Windows'

    - name: Install dependencies (Windows)
      # The `$GITHUB_ENV` shenanigans creates an environment variable
      # containing the hash of the archive, for use in the cache key
      # below.
      shell: bash
      run: |
        # install dependencies
        # ============================================================================================================
        echo GAFFER_DEPENDENCIES_HASH=`python .github/workflows/main/installDependencies.py --archiveURL ${{ matrix.dependenciesURL }} --dependenciesDir ${{ env.GAFFER_BUILD_DIR }} --outputFormat "{archiveDigest}"` >> $GITHUB_ENV
        ./config/installArnold.sh
        ./config/installDelight.sh
        echo ARNOLD_ROOT=$GITHUB_WORKSPACE\\arnoldRoot >> $GITHUB_ENV
        echo DELIGHT=$GITHUB_WORKSPACE\\3delight >> $GITHUB_ENV

        # get appleseed from applesed github releases
        # ============================================================================================================
        # [ ! -e ${{ env.GAFFER_BUILD_DIR }}/appleseed ] && cd ${{ env.GAFFER_BUILD_DIR }} ; curl -L  ${{ matrix.appleseedURL }} > appleseed.zip ; unzip appleseed ; cd ..
        [ ! -e ${{ env.GAFFER_BUILD_DIR }}/appleseed ] && echo "APPLESEED_ROOT=False" | tee -a .github/workflows/main/sconsOptions

        # copy inkspace to build folder and patch SConstruct to work with newer inkscape version
        # ============================================================================================================
        cp -rfuv ./inkscape/* ./build/
        sed -i.bak -e "s/export-png/export-filename/" SConstruct

        # in case boost is in a versioned folder, move it to include folder so scons can find it!
        # ============================================================================================================
        [ "$(ls -d ./build/include/boost-*)" != "" ] && mv ./build/include/boost-*/* ./build/include/

        # add dependencies bin and DLLs folder to build PATH
        # ============================================================================================================
        echo $(cygpath -w $(readlink -f ${{ env.GAFFER_BUILD_DIR }}/bin)) >>  $GITHUB_PATH
        echo $(cygpath -w $(readlink -f ${{ env.GAFFER_BUILD_DIR }}/DLLs)) >>  $GITHUB_PATH

        # add scons options to sconsOptions
        # ============================================================================================================
        boost_lib_suffix=$(ls ${{ env.GAFFER_BUILD_DIR }}/Lib/boost_random*.dll | awk -F'/' '{print $(NF)}' | sed 's/boost_random//' | sed 's/.dll//')
        boost_python_suffix=$(ls ${{ env.GAFFER_BUILD_DIR }}/Lib/boost_python*.dll | awk -F'/' '{print $(NF)}' | awk -F'-' '{print $1}' | sed 's/boost_python//' )
        echo "BOOST_LIB_SUFFIX=\"$boost_lib_suffix\"" | tee -a .github/workflows/main/sconsOptions
        echo "BOOST_PYTHON_LIB_SUFFIX=\"$boost_python_suffix\"" | tee -a .github/workflows/main/sconsOptions
        echo "WARNINGS_AS_ERRORS=0" | tee -a .github/workflows/main/sconsOptions
        echo "OPENEXR_LIB_SUFFIX=\"\"" | tee -a .github/workflows/main/sconsOptions
        echo "os.environ['PATH']='$(cygpath -m $(readlink -f ${{ env.GAFFER_BUILD_DIR }}/bin))'+os.path.pathsep+os.environ['PATH']" | tee -a .github/workflows/main/sconsOptions
        echo "os.environ['PATH']='$(cygpath -m $(readlink -f ${{ env.GAFFER_BUILD_DIR }}/DLLs))'+os.path.pathsep+os.environ['PATH']" | tee -a .github/workflows/main/sconsOptions
        echo "os.environ['PYTHONHOME']='${{ env.GAFFER_BUILD_DIR }}'" | tee -a .github/workflows/main/sconsOptions
        echo "os.environ['GITHUB_CI']='1'" | tee -a .github/workflows/main/sconsOptions
        echo "ENV_VARS_TO_IMPORT='PATH PYTHONHOME GITHUB_CI GITHUB_REPOSITORY'" | tee -a .github/workflows/main/sconsOptions
        echo "PACKAGE_FILE='\${INSTALL_DIR}.zip'" | tee -a .github/workflows/main/sconsOptions
        cat .github/workflows/main/sconsOptions

        # force scons to use dependencies bin/python to find the python versin for boost python library.
        # We have to copy python to gaffer_python and patch SConstruct, or else scons will
        # execute the host installed python version, even after adding dependencies bin
        # folder on top of PATH env var.
        # ============================================================================================================
        cp ${{ env.GAFFER_BUILD_DIR }}/bin/python.exe ${{ env.GAFFER_BUILD_DIR }}/bin/gaffer_python.exe
        sed -i.bak -e "s/.python., .-c./'gaffer_python.exe', '-c'/" SConstruct

        # cleanup
        # ============================================================================================================
        rm -rf ./inkscape
        rm -rf ./dependency.zip
      if: runner.os == 'Windows'

    - name: Cache
      uses: actions/cache@v1
      with:
        path: ${{ env.GAFFER_CACHE_DIR }}
        key: ${{ runner.os }}-${{ matrix.containerImage }}-${{env.GAFFER_DEPENDENCIES_HASH}}-${{ matrix.buildType }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.containerImage }}-${{env.GAFFER_DEPENDENCIES_HASH}}-${{ matrix.buildType }}-

    - name: Build Gaffer
      shell: bash
      run: |
        scons -j 2 build BUILD_TYPE=${{ matrix.buildType }} OPTIONS=.github/workflows/main/sconsOptions

#    - name: Test
#      run: |
#        echo "::add-matcher::./.github/workflows/main/problemMatchers/unittest.json"
#        ${{ matrix.testRunner }} "${{ env.GAFFER_BUILD_DIR }}/bin/gaffer test"
#        echo "::remove-matcher owner=unittest::"

    - name: Build Docs and Package
      # We currently experience sporadic hangs in the docs builds (mac), this
      # aborts them in a more timely fashion than the default 6hr timeout.
      timeout-minutes: 20
      run: |
        # Treats warnings-as-errors so we know about broken links
        echo "::add-matcher::./.github/workflows/main/problemMatchers/sphinx.json"
        scons -j 2 package BUILD_TYPE=${{ matrix.buildType }} OPTIONS=.github/workflows/main/sconsOptions
        echo "::remove-matcher owner=sphinx::"
      if: matrix.publish

    - name: Validate
      run: |
        echo "::add-matcher::./.github/workflows/main/problemMatchers/validateRelease.json"
        ./config/validateRelease.py --archive ${{ env.GAFFER_BUILD_NAME }}.${{ matrix.packageExtension }} ${{ env.GAFFER_VALIDATE_EXTRA_FLAGS }}
        echo "::remove-matcher owner=validateRelease::"
      if: matrix.publish

    - uses: actions/upload-artifact@v2
      with:
        name: ${{ env.GAFFER_BUILD_NAME }}
        path: ${{ env.GAFFER_BUILD_NAME }}.${{ matrix.packageExtension }}
      if: matrix.publish && env.GAFFER_GITHUB_RELEASEID == ''

    - name: Publish Release
      run: |
        ./config/publishRelease.py --archive ${{ env.GAFFER_BUILD_NAME }}.${{ matrix.packageExtension }} --repo ${{ github.repository }} --releaseId ${{ env.GAFFER_GITHUB_RELEASEID }}
      if: matrix.publish && env.GAFFER_GITHUB_RELEASEID != ''
      env:
        GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Limit cache size
      # GitHub has a limit of 5G for all caches in a repository. Because we write new
      # files into `./sconsCache` with every build, we must trim its size to avoid
      # unbounded growth. In practice, the archives that get uploaded are much smaller
      # than the limit we apply here, because they're compressed.
      run: ./.github/workflows/main/limitDirectorySize.py --directory ./sconsCache --megabytes ${{ matrix.sconsCacheMegabytes }} --verbose

    # DEBUG: connect to the action node using tmate for debugging
    # NOTE: when opening the tmate link, press 'q' to go to the shell!
    - name: Setup tmate session for debug if error (15 minutes timeout)
      if: ${{ failure() }}
      uses: mxschmitt/action-tmate@v3
      timeout-minutes: 15
